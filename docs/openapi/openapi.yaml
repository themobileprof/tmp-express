openapi: 3.1.0
info:
  title: TheMobileProf API
  description: |
    RESTful API for TheMobileProf Learning Management System (LMS) that supports course management, 
    user authentication, sponsorship programs, testing systems, file uploads, and more.
    
    **Test Type Rule**: 
    - Only `lesson_id` is nullable in the tests table.
    - If a test has both `course_id` and `lesson_id`, it is a **lesson test** (attached to a specific lesson).
    - If a test has a `course_id` but no `lesson_id`, it is a **course test** (attached to the course as a whole).
    
    **100% Discount Logic (Free Enrollments):**
    - **Automatic Handling**: When sponsorship codes provide 100% discount, the system automatically handles free enrollments
    - **Payment Flow**: Free enrollments skip Flutterwave payment processing and create enrollments immediately
    - **Response Format**: Free enrollments return `is_free_enrollment: true` flag with immediate enrollment data
    - **No Verification Required**: Free enrollments don't require payment verification since they're already successful
    
    **Payment Flow Types:**
    1. **Regular Payments**: User provides payment details → Flutterwave payment → Verification → Enrollment
    2. **Free Enrollments**: Sponsorship code with 100% discount → Immediate enrollment → No payment processing
    
    **Sponsorship Code Flow (Important for Frontend):**
    ```
    1. User enters discount code "SPONSOR123"
    2. Frontend validates: GET /api/sponsorships/code/SPONSOR123
    3. Response includes: sponsorship.id = "uuid-here"
    4. Frontend enrolls: POST /api/courses/{courseId}/enroll
        Body: { "sponsorshipId": "uuid-here" }
    ```
    
    **Key Points:**
    - **NEVER send discount codes directly** to enrollment endpoints
    - **ALWAYS validate first** to get the sponsorship UUID
    - **Use sponsorship.id** (UUID), not the discount code string
    - **Check isExpired and isFull** before allowing enrollment
    
    **Admin Sponsorship Management:**
    - **Create Sponsorships**: POST /api/admin/sponsorships (multi-course support)
    - **Payment Tracking**: GET /api/admin/sponsorships/{id}/payment-status
    - **Mark as Paid**: POST /api/admin/sponsorships/{id}/mark-paid (offline payments)
    - **Generate Invoices**: GET /api/admin/sponsorships/{id}/invoice
    - **Admin Features**: Support for offline payments, invoice generation, multi-course sponsorships
    
    **Implementation Status**: All documented endpoints are fully implemented and tested, including the complete file upload system with persistent storage support and comprehensive sponsorship discount handling.
  version: 1.0.0
  contact:
    name: TheMobileProf API Support
    email: api-support@themobileprof.com
    url: https://docs.themobileprof.com
  license:
    name: Proprietary
    url: https://themobileprof.com/license

servers:
  - url: https://api.themobileprof.com/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

security:
  - BearerAuth: []

paths:
  # Paths Index - References all endpoint path files

    # Authentication Endpoints
    /auth/register:
      $ref: './paths/auth.yaml#/register'
    /auth/login:
      $ref: './paths/auth.yaml#/login'
    /auth/google:
      $ref: './paths/auth.yaml#/google'
    /auth/me:
      $ref: './paths/auth.yaml#/me'
    /auth/profile:
      $ref: './paths/auth.yaml#/profile'
    /auth/refresh:
      $ref: './paths/auth.yaml#/refresh'
    /auth/logout:
      $ref: './paths/auth.yaml#/logout'
    /auth/change-password:
      $ref: './paths/auth.yaml#/change-password'
    /auth/forgot-password:
      $ref: './paths/auth.yaml#/forgot-password'
    /auth/reset-password:
      $ref: './paths/auth.yaml#/reset-password'
    /auth/verify-email:
      $ref: './paths/auth.yaml#/verify-email'
    /auth/resend-verification:
      $ref: './paths/auth.yaml#/resend-verification'
    /auth/me/resend-verification:
      $ref: './paths/auth.yaml#/me~1resend-verification'
    /auth/admin/users/{id}/resend-verification:
      $ref: './paths/auth.yaml#/admin~1users~1{id}~1resend-verification'
    /auth/admin/login:
      $ref: './paths/auth.yaml#/admin~1login'
    /auth/admin/google:
      $ref: './paths/auth.yaml#/admin~1google'

    # Payment Endpoints
    /payments/initialize:
      $ref: './paths/payments.yaml#/initialize'
    /payments/verify/{reference}:
      $ref: './paths/payments.yaml#/verify'

    /payments/user:
      $ref: './paths/payments.yaml#/getUserPayments'
    /payments/{id}:
      $ref: './paths/payments.yaml#/getPaymentById'

    # Admin Payment Endpoints
    /admin/payments:
      $ref: './paths/payments.yaml#/admin-payments'
    /admin/payments/stats:
      $ref: './paths/payments.yaml#/admin-payments-stats'

    # Sponsorship Endpoints
    /sponsorships:
      $ref: './paths/sponsorships.yaml#/~1'
    /sponsorships/{id}:
      $ref: './paths/sponsorships.yaml#/~1{id}'
    /sponsorships/{id}/use:
      $ref: './paths/sponsorships.yaml#/~1{id}~1use'
    /sponsorships/{id}/stats:
      $ref: './paths/sponsorships.yaml#/~1{id}~1stats'
    /sponsorships/{id}/email:
      $ref: './paths/sponsorships.yaml#/~1{id}~1email'
    /sponsorships/code/{discountCode}:
      $ref: './paths/sponsorships.yaml#/~1code~1{discountCode}'

    # Admin Sponsorship Endpoints
    /admin/sponsorships:
      $ref: './paths/sponsorships.yaml#/~1admin~1sponsorships'
    /admin/sponsorships/{id}/payment-status:
      $ref: './paths/sponsorships.yaml#/~1admin~1sponsorships~1{id}~1payment-status'
    /admin/sponsorships/{id}/mark-paid:
      $ref: './paths/sponsorships.yaml#/~1admin~1sponsorships~1{id}~1mark-paid'
    /admin/sponsorships/{id}/invoice:
      $ref: './paths/sponsorships.yaml#/~1admin~1sponsorships~1{id}~1invoice'

    # Sponsorship Opportunities Endpoints
    /sponsorship-opportunities:
      $ref: './paths/sponsorship-opportunities.yaml#/~1'
    /sponsorship-opportunities/{id}:
      $ref: './paths/sponsorship-opportunities.yaml#/~1{id}'
    /sponsorship-opportunities/{id}/contribute:
      $ref: './paths/sponsorship-opportunities.yaml#/~1{id}~1contribute'

    # Discussion Endpoints
    /discussions/recent:
      $ref: './paths/discussions.yaml#/~1recent'
    /discussions:
      $ref: './paths/discussions.yaml#/~1'
    /discussions/categories:
      $ref: './paths/discussions.yaml#/~1categories'
    /discussions/categories/{id}:
      $ref: './paths/discussions.yaml#/~1categories~1{id}'
    /discussions/categories/{id}/stats:
      $ref: './paths/discussions.yaml#/~1categories~1{id}~1stats'
    /discussions/tags:
      $ref: './paths/discussions.yaml#/~1tags'
    /discussions/{id}:
      $ref: './paths/discussions.yaml#/~1{id}'
    /discussions/{id}/replies:
      $ref: './paths/discussions.yaml#/~1{id}~1replies'
    /discussions/{id}/like:
      $ref: './paths/discussions.yaml#/~1{id}~1like'

    # Certifications Endpoints
    /certifications:
      $ref: './paths/certifications.yaml#/~1'
    /certifications/{id}:
      $ref: './paths/certifications.yaml#/~1{id}'
    /certifications/verify/{code}:
      $ref: './paths/certifications.yaml#/~1verify~1{code}'
    /certifications/my:
      $ref: './paths/certifications.yaml#/~1my'
    /certifications/{id}/download:
      $ref: './paths/certifications.yaml#/~1{id}~1download'
    /certifications/progress:
      $ref: './paths/certifications.yaml#/~1progress'

    # Certification Programs
    /certification-programs:
      $ref: './paths/certification-programs.yaml#/~1'
    /certification-programs/{id}/enroll:
      $ref: './paths/certification-programs.yaml#/~1{id}~1enroll'

    # Lessons (path-level refs)
    /lessons/{id}:
      $ref: './paths/lessons.yaml#/~1{id}'
    /lessons/{id}/complete:
      $ref: './paths/lessons.yaml#/~1{id}~1complete'
    /lessons/{id}/progress:
      $ref: './paths/lessons.yaml#/~1{id}~1progress'
    /lessons/{id}/workshop:
      $ref: './paths/lessons.yaml#/~1{id}~1workshop'
    /admin/lessons/{lessonId}/workshop:
      $ref: './paths/lessons.yaml#/~1admin~1lessons~1{lessonId}~1workshop'
    /lessons/admin/courses/{courseId}/lessons:
      $ref: './paths/lessons.yaml#/~1admin~1courses~1{courseId}~1lessons'
    /lessons/courses/{id}/lessons:
      $ref: './paths/lessons.yaml#/~1courses~1{id}~1lessons'

    # Courses (use correct file per path)
    /courses/browse:
      $ref: './paths/courses.yaml#/~1browse'
    /courses:
      $ref: './paths/courses.yaml#/~1'
    /courses/{id}:
      $ref: './paths/courses.yaml#/~1{id}'
    /courses/{id}/tests:
      $ref: './paths/courses.yaml#/~1{id}~1tests'
    /courses/{id}/enrollments:
      $ref: './paths/courses.yaml#/~1{id}~1enrollments'
    /courses/{id}/enroll:
      $ref: './paths/courses.yaml#/~1{id}~1enroll'
    /courses/{id}/enrollments/{enrollmentId}:
      $ref: './paths/courses.yaml#/~1{id}~1enrollments~1{enrollmentId}'
    /courses/{id}/lessons:
      $ref: './paths/courses.yaml#/~1{id}~1lessons'
    /courses/{id}/progression:
      $ref: './paths/courses.yaml#/~1{id}~1progression'
    /courses/{id}/test-stats:
      $ref: './paths/courses.yaml#/~1{id}~1test-stats'
    /courses/{id}/analytics:
      $ref: './paths/courses.yaml#/~1{id}~1analytics'
    /courses/{id}/discussions:
      $ref: './paths/courses.yaml#/~1{id}~1discussions'

    # Classes
    /classes/upcoming:
      $ref: './paths/classes.yaml#/~1upcoming'
    /classes/topics:
      $ref: './paths/classes.yaml#/~1topics'
    /classes:
      $ref: './paths/classes.yaml#/~1'
    /classes/{id}:
      $ref: './paths/classes.yaml#/~1{id}'

    # Uploads
    /uploads:
      $ref: './paths/uploads.yaml#/~1'
    /uploads/course-image:
      $ref: './paths/uploads.yaml#/~1course-image'
    /uploads/lesson-material:
      $ref: './paths/uploads.yaml#/~1lesson-material'
    /uploads/avatar:
      $ref: './paths/uploads.yaml#/~1avatar'
    /uploads/certificate:
      $ref: './paths/uploads.yaml#/~1certificate'
    /uploads/{filename}:
      $ref: './paths/uploads.yaml#/~1{filename}'
    /uploads/files:
      $ref: './paths/uploads.yaml#/~1files'
    /uploads/debug:
      $ref: './paths/uploads.yaml#/~1debug'

    # Users
    /users/{id}:
      $ref: './paths/users.yaml#/~1{id}'
    /users/{id}/enrollments:
      $ref: './paths/users.yaml#/~1{id}~1enrollments'
    /users/{id}/enrolled-courses:
      $ref: './paths/users.yaml#/~1{id}~1enrolled-courses'
    /users/{id}/enrolled-classes:
      $ref: './paths/users.yaml#/~1{id}~1enrolled-classes'
    /users/{id}/dashboard-stats:
      $ref: './paths/users.yaml#/~1{id}~1dashboard-stats'
    /users/{id}/certifications:
      $ref: './paths/users.yaml#/~1{id}~1certifications'
    /users/{id}/test-attempts:
      $ref: './paths/users.yaml#/~1{id}~1test-attempts'
    /users/{id}/discussions:
      $ref: './paths/users.yaml#/~1{id}~1discussions'
    /users/enrollments/courses:
      $ref: './paths/users.yaml#/~1enrollments~1courses'
    /users/enrollments/classes:
      $ref: './paths/users.yaml#/~1enrollments~1classes'
    /users/dashboard-stats:
      $ref: './paths/users.yaml#/~1dashboard-stats'
    /users/me/settings:
      $ref: './paths/users.yaml#/~1me~1settings'
    /users/me/profile:
      $ref: './paths/users.yaml#/~1me~1profile'

    # Notifications
    /notifications:
      $ref: './paths/notifications.yaml#/~1'
    /notifications/types:
      $ref: './paths/notifications.yaml#/~1types'
    /notifications/count:
      $ref: './paths/notifications.yaml#/~1count'
    /notifications/preferences:
      $ref: './paths/notifications.yaml#/~1preferences'
    /notifications/{id}/read:
      $ref: './paths/notifications.yaml#/~1{id}~1read'
    /notifications/read-all:
      $ref: './paths/notifications.yaml#/~1read-all'
    /notifications/read-by-type:
      $ref: './paths/notifications.yaml#/~1read-by-type'
    /notifications/{id}:
      $ref: './paths/notifications.yaml#/~1{id}'
    /notifications/bulk:
      $ref: './paths/notifications.yaml#/~1bulk'
    /notifications/system:
      $ref: './paths/notifications.yaml#/~1system'
    /notifications/cleanup:
      $ref: './paths/notifications.yaml#/~1cleanup'
    /notifications/email-logs:
      $ref: './paths/notifications.yaml#/~1email-logs'

    # Search and Meta
    /search/suggestions:
      $ref: './paths/search.yaml#/~1suggestions'
    /meta/classes-facets:
      $ref: './paths/meta.yaml#/getClassesFacets'

    # Debug
    /debug/uploads:
      $ref: './paths/debug.yaml#/debugUploads'
    /test-upload/{filename}:
      $ref: './paths/debug.yaml#/testFileAccess'

    # Scraping
    /scraping/urls:
      $ref: './paths/scraping.yaml#/~1urls'
    /scraping/urls/bulk:
      $ref: './paths/scraping.yaml#/~1urls~1bulk'
    /scraping/urls/pending:
      $ref: './paths/scraping.yaml#/~1urls~1pending'
    /scraping/urls/{id}/status:
      $ref: './paths/scraping.yaml#/~1urls~1{id}~1status'
    /scraping/urls/{id}:
      $ref: './paths/scraping.yaml#/~1urls~1{id}'
    /scraping/stats:
      $ref: './paths/scraping.yaml#/~1stats'
    /scraping/urls/reset-failed:
      $ref: './paths/scraping.yaml#/~1urls~1reset-failed'

    # Tests
    /tests/{id}:
      $ref: './paths/tests.yaml#/~1{id}'
    /tests/{id}/questions:
      $ref: './paths/tests.yaml#/~1{id}~1questions'
    /tests/{id}/questions/{questionId}:
      $ref: './paths/tests.yaml#/~1{id}~1questions~1{questionId}'
    /tests/{id}/start:
      $ref: './paths/tests.yaml#/~1{id}~1start'
    /tests/{id}/proceed:
      $ref: './paths/tests.yaml#/~1{id}~1proceed'
    /tests/{id}/attempts/{attemptId}/answer:
      $ref: './paths/tests.yaml#/~1{id}~1attempts~1{attemptId}~1answer'
    /tests/{id}/attempts/{attemptId}/submit:
      $ref: './paths/tests.yaml#/~1{id}~1attempts~1{attemptId}~1submit'
    /tests/{id}/attempts/{attemptId}/results:
      $ref: './paths/tests.yaml#/~1{id}~1attempts~1{attemptId}~1results'
    /tests/{id}/questions/{questionId}/image/upload:
      $ref: './paths/tests.yaml#/~1{id}~1questions~1{questionId}~1image~1upload'
    /tests/{id}/analytics:
      $ref: './paths/tests.yaml#/~1{id}~1analytics'
    /tests/{id}/attempts:
      $ref: './paths/tests.yaml#/~1{id}~1attempts'
    /tests/{id}/my-attempts:
      $ref: './paths/tests.yaml#/~1{id}~1my-attempts'
    /tests/{id}/attempts/{attemptId}/details:
      $ref: './paths/tests.yaml#/~1{id}~1attempts~1{attemptId}~1details'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
  
  schemas:
    User:
      $ref: './schemas/User.yaml'

    UserProfile:
      $ref: './schemas/UserProfile.yaml'

    Enrollment:
      $ref: './schemas/Enrollment.yaml'

    Sponsorship:
      $ref: './schemas/Sponsorship.yaml'

    SponsorshipOpportunity:
      $ref: './schemas/SponsorshipOpportunity.yaml'

    Payment:
      $ref: './schemas/Payment.yaml'

    Notification:
      $ref: './schemas/Notification.yaml'

    NotificationPreferences:
      $ref: './schemas/NotificationPreferences.yaml'

    EmailLog:
      $ref: './schemas/EmailLog.yaml'

    EmailLogStats:
      $ref: './schemas/EmailLogStats.yaml'

    Pagination:
      $ref: './schemas/Pagination.yaml'

    Test:
      $ref: './schemas/Test.yaml'

    Discussion:
      $ref: './schemas/Discussion.yaml'

    DiscussionReply:
      $ref: './schemas/DiscussionReply.yaml'

    DiscussionCategory:
      $ref: './schemas/DiscussionCategory.yaml'

    Certification:
      $ref: './schemas/Certification.yaml'

    CertificationProgram:
      $ref: './schemas/CertificationProgram.yaml'

    Lesson:
      $ref: './schemas/Lesson.yaml'

    Class:
      $ref: './schemas/Class.yaml'

    Course:
      $ref: './schemas/Course.yaml'

    CourseInstructor:
      $ref: './schemas/CourseInstructor.yaml'

    TestQuestion:
      $ref: './schemas/TestQuestion.yaml'

    TestAttempt:
      $ref: './schemas/TestAttempt.yaml'

    UserSettings:
      $ref: './schemas/UserSettings.yaml'

    DiscussionStats:
      $ref: './schemas/DiscussionStats.yaml' 

    LessonWorkshopSpec:
      type: object
      description: Structured interactive terminal workshop spec for a lesson
      properties:
        title:
          type: string
          description: Title of the workshop
        intro:
          type: string
          description: Intro text shown before the terminal
        environment:
          type: object
          description: Optional runtime hints for the terminal emulator
          properties:
            os:
              type: string
              example: ubuntu-22.04
            shell:
              type: string
              example: bash
            workingDir:
              type: string
              example: /home/student
        steps:
          type: array
          description: Ordered list of steps for the workshop
          items:
            type: object
            required: [step, prompt, expect]
            properties:
              step:
                type: integer
                description: Sequential step number starting at 1
                minimum: 1
              title:
                type: string
                description: Short title for the step
              instruction:
                type: string
                description: Instruction shown to the student for this step
              prompt:
                type: string
                description: The terminal prompt string to display
                example: student@vm:~$ 
              expect:
                type: object
                description: Expectation config for validating input/output
                properties:
                  inputPattern:
                    type: string
                    description: Regex to validate the exact command the student should type
                    example: ^ls\s+-la$
                  outputIncludes:
                    type: array
                    items:
                      type: string
                    description: Strings that should appear in the simulated output
                  outputExcludes:
                    type: array
                    items:
                      type: string
                    description: Strings that must not appear in the output
                  exitCode:
                    type: integer
                    description: Expected exit code for the command
                    default: 0
              simulate:
                type: object
                description: Simulator hints for frontend to render fake output
                properties:
                  stdout:
                    type: string
                    description: Example stdout to show on success
                  stderr:
                    type: string
                    description: Example stderr to show on failure
                  filesChanged:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                        diff:
                          type: string
              comments:
                type: string
                description: Human-readable notes for admins about what is expected
  
  responses:
    NotFound:
      $ref: './responses/NotFound.yaml'
    Unauthorized:
      $ref: './responses/Unauthorized.yaml'
    Forbidden:
      $ref: './responses/Forbidden.yaml'
    BadRequest:
      $ref: './responses/BadRequest.yaml'
    Conflict:
      $ref: './responses/Conflict.yaml'

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Payments
    description: 'Payment processing and enrollment management with automatic 100% discount handling. **Note**: For sponsorship codes, always validate first to get the sponsorship UUID before enrolling.'
  - name: Admin Payments
    description: Admin payment management and analytics
  - name: Sponsorships
    description: 'Sponsorship management and discount code system with admin payment tracking and invoice generation. **Important**: Use validation endpoint first to get sponsorship UUID for enrollment. **Admin Features**: Multi-course sponsorships, offline payment tracking, invoice generation.'
  - name: Sponsorship Opportunities
    description: Sponsorship opportunity creation and management
  - name: Discussions
    description: Discussion forum and community engagement system
  - name: Certifications
    description: User certification and credential management
  - name: Certification Programs
    description: Certification program enrollment and progress tracking
  - name: Lessons
    description: Course lesson management and progress tracking
  - name: Courses
    description: 'Course management and enrollment system. **Note**: For sponsorship enrollment, use the sponsorship UUID from validation, not the discount code.'
  - name: Classes
    description: Live class scheduling and enrollment management
  - name: File Uploads
    description: File upload and management endpoints
  - name: Notifications
    description: User notification system and preferences
  - name: Search
    description: Search and discovery endpoints
  - name: Meta
    description: Metadata and system information endpoints
  - name: Debug
    description: Debug and testing endpoints
  - name: Tests
    description: Test management and assessment endpoints
  - name: Scraping
    description: Web scraping management and URL processing endpoints
  - name: Users
    description: User management and profile endpoints 