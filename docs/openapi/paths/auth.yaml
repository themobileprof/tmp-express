# Authentication Endpoints

register:
  post:
    tags:
      - Authentication
    summary: Register User
    description: Register a new user with email and password
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
              - firstName
              - lastName
            properties:
              email:
                type: string
                format: email
                description: User email address
              password:
                type: string
                minLength: 6
                description: User password
              firstName:
                type: string
                minLength: 1
                description: User first name
              lastName:
                type: string
                minLength: 1
                description: User last name
              role:
                type: string
                enum: [student, instructor, admin, sponsor]
                default: student
                description: User role
    responses:
      '201':
        description: User registered successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '../schemas/User.yaml'
                token:
                  type: string
      '400':
        $ref: '../responses/BadRequest.yaml'
      '409':
        $ref: '../responses/Conflict.yaml'

login:
  post:
    tags:
      - Authentication
    summary: Login User
    description: Authenticate user with email and password
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
    responses:
      '200':
        description: Login successful
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '../schemas/User.yaml'
                token:
                  type: string
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '403':
        description: Email verification required
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: string
                  enum: [EMAIL_VERIFICATION_REQUIRED]
                message:
                  type: string

google:
  post:
    tags:
      - Authentication
    summary: Google OAuth Login/Signup
    description: |
      Authenticate or register user with Google OAuth.
      - If user exists with Google ID, logs them in
      - If user exists with email but different auth provider, links Google account
      - If user doesn't exist, creates new account
      - Google profile picture is automatically set as avatar
      - Email verification status is set based on Google's verification
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - token
            properties:
              token:
                type: string
                description: Google ID token
              firstName:
                type: string
                description: Optional, will use Google data if not provided
              lastName:
                type: string
                description: Optional, will use Google data if not provided
              role:
                type: string
                enum: [student, instructor, admin, sponsor]
                default: student
                description: User role
    responses:
      '200':
        description: Google authentication successful
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '../schemas/User.yaml'
                token:
                  type: string
      '201':
        description: New user created successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '../schemas/User.yaml'
                token:
                  type: string
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '409':
        $ref: '../responses/Conflict.yaml'

me:
  get:
    tags:
      - Authentication
    summary: Get Current User
    description: Get current user information
    security:
      - BearerAuth: []
    responses:
      '200':
        description: User information retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '../schemas/User.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'

profile:
  get:
    tags:
      - Authentication
    summary: Get Current User Profile (Frontend Compatible)
    description: Get current user profile in frontend-compatible format
    security:
      - BearerAuth: []
    responses:
      '200':
        description: User profile retrieved successfully
        content:
          application/json:
            schema:
              $ref: '../schemas/UserProfile.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'

refresh:
  post:
    tags:
      - Authentication
    summary: Refresh Token
    description: Refresh JWT token
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - token
            properties:
              token:
                type: string
                description: JWT token to refresh
    responses:
      '200':
        description: Token refreshed successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: New JWT token
                user:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    email:
                      type: string
                    role:
                      type: string
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'

logout:
  post:
    tags:
      - Authentication
    summary: Logout User
    description: Logout user (client-side token removal)
    responses:
      '200':
        description: Logout successful
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Success message

change-password:
  post:
    tags:
      - Authentication
    summary: Change Password
    description: Change user password (only for local authentication users)
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - currentPassword
              - newPassword
            properties:
              currentPassword:
                type: string
                description: Current password
              newPassword:
                type: string
                minLength: 6
                description: New password
    responses:
      '200':
        description: Password changed successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Success message
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

admin/login:
  post:
    tags:
      - Authentication
    summary: Admin Login
    description: Authenticate admin user with email and password (admin only)
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
              password:
                type: string
    responses:
      '200':
        description: Admin login successful
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '../schemas/User.yaml'
                token:
                  type: string
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'

admin/google:
  post:
    tags:
      - Authentication
    summary: Admin Google OAuth Login
    description: Authenticate admin user with Google OAuth (admin only)
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - token
            properties:
              token:
                type: string
                description: Google ID token
    responses:
      '200':
        description: Admin Google authentication successful
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '../schemas/User.yaml'
                token:
                  type: string
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '409':
        $ref: '../responses/Conflict.yaml'

forgot-password:
  post:
    tags:
      - Authentication
    summary: Request Password Reset
    description: Request a password reset link. Always returns success to avoid account enumeration.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
    responses:
      '200':
        description: If the email exists, reset instructions will be sent
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      '400':
        $ref: '../responses/BadRequest.yaml'

reset-password:
  post:
    tags:
      - Authentication
    summary: Reset Password
    description: Reset password using a valid reset token. Not available for Google OAuth accounts.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - token
              - newPassword
            properties:
              token:
                type: string
              newPassword:
                type: string
                minLength: 6
    responses:
      '200':
        description: Password reset successful
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      '400':
        $ref: '../responses/BadRequest.yaml'

verify-email:
  post:
    tags:
      - Authentication
    summary: Verify Email
    description: Verify a user's email using a verification token
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - token
            properties:
              token:
                type: string
    responses:
      '200':
        description: Email verified successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      '400':
        $ref: '../responses/BadRequest.yaml'

resend-verification:
  post:
    tags:
      - Authentication
    summary: Resend Verification Email (by email)
    description: Resend the verification email. Always returns success to avoid account enumeration.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
    responses:
      '200':
        description: Verification email sent if account exists and is unverified
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      '400':
        $ref: '../responses/BadRequest.yaml'

me~1resend-verification:
  post:
    tags:
      - Authentication
    summary: Resend Verification Email (current user)
    description: Resend the verification email for the authenticated user
    security:
      - BearerAuth: []
    responses:
      '200':
        description: Verification email sent
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      '401':
        $ref: '../responses/Unauthorized.yaml'

admin~1users~1{id}~1resend-verification:
  post:
    tags:
      - Authentication
    summary: Admin Resend Verification Email for User
    description: Admin can resend verification email for any user
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      '200':
        description: Verification email sent
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '403':
        $ref: '../responses/Forbidden.yaml'
      '404':
        $ref: '../responses/NotFound.yaml' 