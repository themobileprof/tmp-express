# Tests Endpoints
/{id}:
  # Get Test by ID
  get:
    tags:
      - Tests
    summary: Get Test by ID
    description: Get test details by ID
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
    responses:
      '200':
        description: Test details retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                courseId:
                  type: string
                  format: uuid
                courseTitle:
                  type: string
                title:
                  type: string
                description:
                  type: string
                  nullable: true
                durationMinutes:
                  type: integer
                passingScore:
                  type: integer
                maxAttempts:
                  type: integer
                orderIndex:
                  type: integer
                isPublished:
                  type: boolean
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
      '404':
        $ref: '../responses/NotFound.yaml'

  # Update Test
  put:
    tags:
      - Tests
    summary: Update Test
    description: Update test details (instructor/admin only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: Test title
              description:
                type: string
                description: Test description
              durationMinutes:
                type: integer
                minimum: 1
                description: Duration in minutes
              passingScore:
                type: integer
                minimum: 0
                maximum: 100
                description: Passing score percentage
              maxAttempts:
                type: integer
                minimum: 1
                description: Maximum number of attempts allowed
              orderIndex:
                type: integer
                minimum: 0
                description: Order index for test sequence
              isPublished:
                type: boolean
                description: Whether the test is published
    responses:
      '200':
        description: Test updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                title:
                  type: string
                description:
                  type: string
                  nullable: true
                durationMinutes:
                  type: integer
                passingScore:
                  type: integer
                maxAttempts:
                  type: integer
                orderIndex:
                  type: integer
                isPublished:
                  type: boolean
                updatedAt:
                  type: string
                  format: date-time
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '403':
        $ref: '../responses/Forbidden.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

  # Delete Test
  delete:
    tags:
      - Tests
    summary: Delete Test
    description: Delete a test (instructor/admin only). Cannot delete if test has attempts.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
    responses:
      '200':
        description: Test deleted successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Test deleted successfully"
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '403':
        $ref: '../responses/Forbidden.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

  # (deprecated) test-level flag removed â€” use per-question flags instead

/{id}/questions:
  # Get Test Questions
  get:
    tags:
      - Tests
    summary: Get Test Questions
    description: Get all questions for a test
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
    responses:
      '200':
        description: Test questions retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                questions:
                  type: array
                  items:
                    $ref: '../schemas/TestQuestion.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

  # Add Question to Test
  post:
    tags:
      - Tests
    summary: Add Question to Test
    description: Add a new question to a test (instructor/admin only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - question
              - questionType
              - points
            properties:
              question:
                type: string
                description: Question text
              questionType:
                type: string
                enum: [multiple_choice, true_false, short_answer]
                description: Type of question
              options:
                type: array
                items:
                  type: string
                description: Answer options (required for multiple choice)
              correctAnswer:
                type: integer
                description: Index of correct answer (required for multiple choice/true-false)
              correctAnswerText:
                type: string
                description: Correct answer text (required for short answer)
              points:
                type: integer
                minimum: 1
                description: Points for this question
              orderIndex:
                type: integer
                minimum: 0
                description: Order index for question sequence
    responses:
      '201':
        description: Question added successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                question:
                  type: string
                questionType:
                  type: string
                options:
                  type: array
                  items:
                    type: string
                  nullable: true
                correctAnswer:
                  type: integer
                  nullable: true
                correctAnswerText:
                  type: string
                  nullable: true
                points:
                  type: integer
                orderIndex:
                  type: integer
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '403':
        $ref: '../responses/Forbidden.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

# (Removed admin test-level clear-flag) Use question-level flags instead

/{id}/questions/{questionId}:
  # Update Question
  put:
    tags:
      - Tests
    summary: Update Question
    description: Update a question in a test (instructor/admin only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
      - name: questionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Question ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              question:
                type: string
                description: Question text
              questionType:
                type: string
                enum: [multiple_choice, true_false, short_answer]
                description: Type of question
              options:
                type: array
                items:
                  type: string
                description: Answer options
              correctAnswer:
                type: integer
                description: Index of correct answer
              correctAnswerText:
                type: string
                description: Correct answer text
              points:
                type: integer
                minimum: 1
                description: Points for this question
              orderIndex:
                type: integer
                minimum: 0
                description: Order index
    responses:
      '200':
        description: Question updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                question:
                  type: string
                questionType:
                  type: string
                options:
                  type: array
                  items:
                    type: string
                  nullable: true
                correctAnswer:
                  type: integer
                  nullable: true
                correctAnswerText:
                  type: string
                  nullable: true
                points:
                  type: integer
                orderIndex:
                  type: integer
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '403':
        $ref: '../responses/Forbidden.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

  # Delete Question
  delete:
    tags:
      - Tests
    summary: Delete Question
    description: Delete a question from a test (instructor/admin only). Cannot delete if question has been answered.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
      - name: questionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Question ID
    responses:
      '200':
        description: Question deleted successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Question deleted successfully"
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '403':
        $ref: '../responses/Forbidden.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

    # Flag a specific question (user-facing)
    post:
      tags:
        - Tests
      summary: Flag a question for review
      description: Allow an authenticated user to flag a specific question within a test for manual review. One flag per user per question is enforced.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
        - name: questionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Question ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Optional reason provided by the user for flagging the question
      responses:
        '200':
          description: Question flagged for review
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
        '401':
          $ref: '../responses/Unauthorized.yaml'
        '404':
          $ref: '../responses/NotFound.yaml'

/{id}/start:
  # Start Test Attempt
  post:
    tags:
      - Tests
    summary: Start Test Attempt
    description: Start a new test attempt or resume an existing in-progress attempt
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
    responses:
      '200':
        description: Test attempt started successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                attempt:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    testId:
                      type: string
                      format: uuid
                    userId:
                      type: string
                      format: uuid
                    attemptNumber:
                      type: integer
                    status:
                      type: string
                      enum: [in_progress, completed, abandoned]
                    startedAt:
                      type: string
                      format: date-time
                questions:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      question:
                        type: string
                      questionType:
                        type: string
                        enum: [multiple_choice, true_false, short_answer]
                      options:
                        type: array
                        items:
                          type: string
                        nullable: true
                      points:
                        type: integer
                      orderIndex:
                        type: integer
                      selectedAnswer:
                        type: integer
                        nullable: true
                      answerText:
                        type: string
                        nullable: true
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

/{id}/proceed:
  # Force Proceed After Max Attempts
  post:
    tags:
      - Tests
    summary: Force Proceed After Max Attempts
    description: Force progression after reaching maximum attempts
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
    responses:
      '200':
        description: Proceeding with last attempt score
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Proceeding with last attempt score"
                details:
                  type: object
                  properties:
                    lastAttemptId:
                      type: string
                      format: uuid
                    score:
                      type: integer
                    totalQuestions:
                      type: integer
                    correctAnswers:
                      type: integer
                    timeTakenMinutes:
                      type: integer
                    completedAt:
                      type: string
                      format: date-time
                    passed:
                      type: boolean
                    forcedProceed:
                      type: boolean
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

/{id}/attempts/{attemptId}/answer:
  # Submit Answer
  put:
    tags:
      - Tests
    summary: Submit Answer
    description: Submit an answer for a test question
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
      - name: attemptId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Attempt ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - questionId
            properties:
              questionId:
                type: string
                format: uuid
                description: ID of the question being answered
              selectedAnswer:
                type: integer
                description: Selected answer index (for multiple choice/true-false)
              answerText:
                type: string
                description: Answer text (for short answer questions)
    responses:
      '200':
        description: Answer submitted successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "Answer saved successfully"
                isCorrect:
                  type: boolean
                  description: Whether the answer is correct
                pointsEarned:
                  type: integer
                  description: Points earned for this answer
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

/{id}/attempts/{attemptId}/submit:
  # Submit Test
  post:
    tags:
      - Tests
    summary: Submit Test
    description: Submit completed test
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
      - name: attemptId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Attempt ID
    requestBody:
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              forceProceed:
                type: boolean
                default: false
                description: Allow progression even if test is not passed
    responses:
      '200':
        description: Test submitted successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                results:
                  type: object
                  properties:
                    attemptId:
                      type: string
                      format: uuid
                    score:
                      type: integer
                      description: Score percentage
                    totalQuestions:
                      type: integer
                    correctAnswers:
                      type: integer
                    timeTakenMinutes:
                      type: integer
                    completedAt:
                      type: string
                      format: date-time
                    passed:
                      type: boolean
                    forceProceed:
                      type: boolean
                    message:
                      type: string
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

/{id}/attempts/{attemptId}/results:
  # Get Test Results
  get:
    tags:
      - Tests
    summary: Get Test Results
    description: Get detailed test results for a completed attempt
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
      - name: attemptId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Attempt ID
    responses:
      '200':
        description: Test results retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                attempt:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    score:
                      type: integer
                      description: Score percentage
                    totalQuestions:
                      type: integer
                    correctAnswers:
                      type: integer
                    timeTakenMinutes:
                      type: integer
                    status:
                      type: string
                      enum: [in_progress, completed, abandoned]
                    startedAt:
                      type: string
                      format: date-time
                    completedAt:
                      type: string
                      format: date-time
                questions:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      question:
                        type: string
                      questionType:
                        type: string
                        enum: [multiple_choice, true_false, short_answer]
                      options:
                        type: array
                        items:
                          type: string
                        nullable: true
                      correctAnswer:
                        type: integer
                        nullable: true
                      correctAnswerText:
                        type: string
                        nullable: true
                      userAnswer:
                        type: integer
                        nullable: true
                      userAnswerText:
                        type: string
                        nullable: true
                      isCorrect:
                        type: boolean
                      pointsEarned:
                        type: integer
                      points:
                        type: integer
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

/{id}/questions/{questionId}/image/upload:
  # Upload Question Image
  post:
    tags:
      - Tests
    summary: Upload Question Image
    description: Upload an image for a test question (instructor/admin only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
      - name: questionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Question ID
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              image:
                type: string
                format: binary
                description: Image file (PNG, JPG, JPEG, GIF, SVG, max 5MB)
    responses:
      '200':
        description: Image uploaded successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                imageUrl:
                  type: string
                  description: URL of the uploaded image
                message:
                  type: string
                  example: "Image uploaded successfully"
      '400':
        $ref: '../responses/BadRequest.yaml'
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '403':
        $ref: '../responses/Forbidden.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

/{id}/analytics:
  # Get Test Analytics
  get:
    tags:
      - Tests
    summary: Get Test Analytics
    description: Get comprehensive analytics for a test (admin/instructor only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
    responses:
      '200':
        description: Test analytics retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                totalAttempts:
                  type: integer
                  description: Total number of completed attempts
                averageScore:
                  type: number
                  description: Average score across all attempts
                passRate:
                  type: number
                  description: Pass rate percentage
                averageTimeMinutes:
                  type: number
                  description: Average time taken in minutes
                questionAnalytics:
                  type: array
                  items:
                    type: object
                    properties:
                      questionId:
                        type: string
                        format: uuid
                      question:
                        type: string
                      questionType:
                        type: string
                        enum: [multiple_choice, true_false, short_answer]
                      points:
                        type: integer
                      totalAnswers:
                        type: integer
                        description: Total number of answers for this question
                      correctAnswers:
                        type: integer
                        description: Number of correct answers
                      correctRate:
                        type: number
                        description: Correct answer rate percentage
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '403':
        $ref: '../responses/Forbidden.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

/{id}/attempts:
  # List All Attempts for a Test
  get:
    tags:
      - Tests
    summary: List All Attempts for a Test
    description: List all attempts for a test (admin/instructor only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          maximum: 100
        description: Number of results to return
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          default: 0
        description: Number of results to skip
    responses:
      '200':
        description: Test attempts retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                test:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    title:
                      type: string
                    passingScore:
                      type: integer
                attempts:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      userId:
                        type: string
                        format: uuid
                      userName:
                        type: string
                        description: Full name of the user
                      userEmail:
                        type: string
                        format: email
                      attemptNumber:
                        type: integer
                      score:
                        type: integer
                        nullable: true
                      totalQuestions:
                        type: integer
                      correctAnswers:
                        type: integer
                        nullable: true
                      status:
                        type: string
                        enum: [in_progress, completed, abandoned]
                      startedAt:
                        type: string
                        format: date-time
                      completedAt:
                        type: string
                        format: date-time
                        nullable: true
                      timeTakenMinutes:
                        type: integer
                        nullable: true
                      passed:
                        type: boolean
                        nullable: true
                pagination:
                  type: object
                  properties:
                    total:
                      type: integer
                    limit:
                      type: integer
                    offset:
                      type: integer
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '403':
        $ref: '../responses/Forbidden.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

/{id}/my-attempts:
  # Get User's Own Test Attempts
  get:
    tags:
      - Tests
    summary: Get User's Own Test Attempts
    description: Get user's own test attempts (student view)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
    responses:
      '200':
        description: User's test attempts retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                test:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    title:
                      type: string
                    passingScore:
                      type: integer
                    maxAttempts:
                      type: integer
                attempts:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      attemptNumber:
                        type: integer
                      score:
                        type: integer
                        nullable: true
                      totalQuestions:
                        type: integer
                      correctAnswers:
                        type: integer
                        nullable: true
                      status:
                        type: string
                        enum: [in_progress, completed, abandoned]
                      startedAt:
                        type: string
                        format: date-time
                      completedAt:
                        type: string
                        format: date-time
                        nullable: true
                      timeTakenMinutes:
                        type: integer
                        nullable: true
                      passed:
                        type: boolean
                        nullable: true
                currentAttempts:
                  type: integer
                  description: Number of attempts made so far
                canStartNew:
                  type: boolean
                  description: Whether user can start a new attempt
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '404':
        $ref: '../responses/NotFound.yaml'

/{id}/attempts/{attemptId}/details:
  # Get Detailed Answers for a Student's Attempt
  get:
    tags:
      - Tests
    summary: Get Detailed Answers for a Student's Attempt
    description: Get detailed answers for a student's attempt (admin/instructor only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Test ID
      - name: attemptId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Attempt ID
    responses:
      '200':
        description: Detailed answers retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                attempt:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    studentName:
                      type: string
                      description: Full name of the student
                    studentEmail:
                      type: string
                      format: email
                    score:
                      type: integer
                      nullable: true
                    timeSpent:
                      type: integer
                      nullable: true
                      description: Time spent in minutes
                    attemptNumber:
                      type: integer
                    completedAt:
                      type: string
                      format: date-time
                      nullable: true
                    status:
                      type: string
                      enum: [in_progress, completed, abandoned]
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      questionId:
                        type: string
                        format: uuid
                      question:
                        type: string
                      questionType:
                        type: string
                        enum: [multiple_choice, true_false, short_answer]
                      options:
                        type: array
                        items:
                          type: string
                        nullable: true
                      correctAnswer:
                        type: integer
                        nullable: true
                      correctAnswerText:
                        type: string
                        nullable: true
                      userAnswer:
                        type: integer
                        nullable: true
                      userAnswerText:
                        type: string
                        nullable: true
                      isCorrect:
                        type: boolean
                      pointsEarned:
                        type: integer
      '401':
        $ref: '../responses/Unauthorized.yaml'
      '403':
        $ref: '../responses/Forbidden.yaml'
      '404':
        $ref: '../responses/NotFound.yaml' 