openapi: 3.1.0
info:
  title: TheMobileProf API
  description: |
    RESTful API for TheMobileProf Learning Management System (LMS) that supports course management, 
    user authentication, sponsorship programs, testing systems, file uploads, and more.

    **Test Type Rule**: 
    - Only `lesson_id` is nullable in the tests table.
    - If a test has both `course_id` and `lesson_id`, it is a **lesson test** (attached to a specific lesson).
    - If a test has a `course_id` but no `lesson_id`, it is a **course test** (attached to the course as a whole).

    **100% Discount Logic (Free Enrollments):**
    - **Automatic Handling**: When sponsorship codes provide 100% discount, the system automatically handles free enrollments
    - **Payment Flow**: Free enrollments skip Flutterwave payment processing and create enrollments immediately
    - **Response Format**: Free enrollments return `is_free_enrollment: true` flag with immediate enrollment data
    - **No Verification Required**: Free enrollments don't require payment verification since they're already successful

    **Payment Flow Types:**
    1. **Regular Payments**: User provides payment details → Flutterwave payment → Verification → Enrollment
    2. **Free Enrollments**: Sponsorship code with 100% discount → Immediate enrollment → No payment processing

    **Sponsorship Code Flow (Important for Frontend):**
    ```
    1. User enters discount code "SPONSOR123"
    2. Frontend validates: GET /api/sponsorships/code/SPONSOR123
    3. Response includes: sponsorship.id = "uuid-here"
    4. Frontend enrolls: POST /api/courses/{courseId}/enroll
        Body: { "sponsorshipId": "uuid-here" }
    ```

    **Key Points:**
    - **NEVER send discount codes directly** to enrollment endpoints
    - **ALWAYS validate first** to get the sponsorship UUID
    - **Use sponsorship.id** (UUID), not the discount code string
    - **Check isExpired and isFull** before allowing enrollment

    **Admin Sponsorship Management:**
    - **Create Sponsorships**: POST /api/admin/sponsorships (multi-course support)
    - **Payment Tracking**: GET /api/admin/sponsorships/{id}/payment-status
    - **Mark as Paid**: POST /api/admin/sponsorships/{id}/mark-paid (offline payments)
    - **Generate Invoices**: GET /api/admin/sponsorships/{id}/invoice
    - **Admin Features**: Support for offline payments, invoice generation, multi-course sponsorships

    **Implementation Status**: All documented endpoints are fully implemented and tested, including the complete file upload system with persistent storage support and comprehensive sponsorship discount handling.
  version: 1.0.0
  contact:
    name: TheMobileProf API Support
    email: api-support@themobileprof.com
    url: 'https://docs.themobileprof.com'
  license:
    name: Proprietary
    url: 'https://themobileprof.com/license'
servers:
  - url: 'https://api.themobileprof.com/api'
    description: Production server
  - url: 'http://localhost:3000/api'
    description: Development server
security:
  - BearerAuth: []
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register User
      description: Register a new user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                password:
                  type: string
                  minLength: 6
                  description: User password
                firstName:
                  type: string
                  minLength: 1
                  description: User first name
                lastName:
                  type: string
                  minLength: 1
                  description: User last name
                role:
                  type: string
                  enum:
                    - student
                    - instructor
                    - admin
                    - sponsor
                  default: student
                  description: User role
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login User
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Email verification required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - EMAIL_VERIFICATION_REQUIRED
                  message:
                    type: string
  /auth/google:
    post:
      tags:
        - Authentication
      summary: Google OAuth Login/Signup
      description: |
        Authenticate or register user with Google OAuth.
        - If user exists with Google ID, logs them in
        - If user exists with email but different auth provider, links Google account
        - If user doesn't exist, creates new account
        - Google profile picture is automatically set as avatar
        - Email verification status is set based on Google's verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Google ID token
                firstName:
                  type: string
                  description: 'Optional, will use Google data if not provided'
                lastName:
                  type: string
                  description: 'Optional, will use Google data if not provided'
                role:
                  type: string
                  enum:
                    - student
                    - instructor
                    - admin
                    - sponsor
                  default: student
                  description: User role
      responses:
        '200':
          description: Google authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '201':
          description: New user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get Current User
      description: Get current user information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get Current User Profile (Frontend Compatible)
      description: Get current user profile in frontend-compatible format
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh Token
      description: Refresh JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: JWT token to refresh
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: New JWT token
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      email:
                        type: string
                      role:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout User
      description: Logout user (client-side token removal)
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change Password
      description: Change user password (only for local authentication users)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  description: Current password
                newPassword:
                  type: string
                  minLength: 6
                  description: New password
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request Password Reset
      description: Request a password reset link. Always returns success to avoid account enumeration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: 'If the email exists, reset instructions will be sent'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset Password
      description: Reset password using a valid reset token. Not available for Google OAuth accounts.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  minLength: 6
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify Email
      description: Verify a user's email using a verification token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /auth/resend-verification:
    post:
      tags:
        - Authentication
      summary: Resend Verification Email (by email)
      description: Resend the verification email. Always returns success to avoid account enumeration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Verification email sent if account exists and is unverified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /auth/me/resend-verification:
    post:
      tags:
        - Authentication
      summary: Resend Verification Email (current user)
      description: Resend the verification email for the authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/auth/admin/users/{id}/resend-verification':
    post:
      tags:
        - Authentication
      summary: Admin Resend Verification Email for User
      description: Admin can resend verification email for any user
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/admin/login:
    post:
      tags:
        - Authentication
      summary: Admin Login
      description: Authenticate admin user with email and password (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Admin login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/admin/google:
    post:
      tags:
        - Authentication
      summary: Admin Google OAuth Login
      description: Authenticate admin user with Google OAuth (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Google ID token
      responses:
        '200':
          description: Admin Google authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
  /payments/initialize:
    post:
      operationId: initialize
      tags:
        - Payments
      summary: Initialize Payment
      description: |
        Initialize a payment for course or class enrollment using Flutterwave Standard v3.0.0.

        **Special Handling for 100% Discounts:**
        - If a sponsorship code provides 100% discount, the payment is automatically marked as successful
        - No Flutterwave payment is required for free enrollments
        - Enrollment is created immediately
        - Response includes `is_free_enrollment: true` flag

        **Payment Flow Logic:**
        1. **Regular Payments**: User provides payment details → Flutterwave payment → Verification → Enrollment
        2. **Free Enrollments**: Sponsorship code with 100% discount → Immediate enrollment → No payment processing

        **Response Format:**
        - Free enrollments return `is_free_enrollment: true` with immediate enrollment data
        - Regular payments return `is_free_enrollment: false` with Flutterwave checkout URL
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - paymentType
                - itemId
              properties:
                paymentType:
                  type: string
                  enum:
                    - course
                    - class
                  description: Type of item being purchased
                itemId:
                  type: string
                  format: uuid
                  description: ID of the course or class
                paymentMethod:
                  type: string
                  enum:
                    - card
                    - bank_transfer
                    - ussd
                    - mobile_money
                    - mpesa
                    - gh_mobile_money
                  description: Payment method to use (ignored for free enrollments)
                sponsorshipCode:
                  type: string
                  description: Optional sponsorship discount code (can result in free enrollment)
                callbackUrl:
                  type: string
                  description: URL where user will be redirected after payment completion
      responses:
        '200':
          description: Payment initialized successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: Free enrollment successful
                      data:
                        type: object
                        properties:
                          is_free_enrollment:
                            type: boolean
                            example: true
                            description: Indicates this is a free enrollment (100% discount)
                          enrollment:
                            $ref: '#/components/schemas/Enrollment'
                            description: Immediately created enrollment for free course/class
                          sponsorship:
                            $ref: '#/components/schemas/Sponsorship'
                            description: Sponsorship details that provided the free enrollment
                          originalPrice:
                            type: number
                            description: Original price before discount
                          discountAmount:
                            type: number
                            description: Full discount amount (100% of original price)
                          finalPrice:
                            type: number
                            example: 0
                            description: Final price after discount (0 for free enrollments)
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: Payment initialized successfully
                      data:
                        type: object
                        properties:
                          payment_id:
                            type: string
                            format: uuid
                            description: Internal payment identifier
                          reference:
                            type: string
                            description: Payment reference for tracking
                          flutterwave_reference:
                            type: string
                            description: Flutterwave payment reference
                          checkout_url:
                            type: string
                            description: Flutterwave checkout URL for payment completion
                          original_amount:
                            type: number
                            description: Original price before any discounts
                          final_amount:
                            type: number
                            description: Final amount to pay after discounts
                          discount_amount:
                            type: number
                            description: Amount of discount applied
                          payment_type:
                            type: string
                            enum:
                              - course
                              - class
                            description: Type of item being purchased
                          sponsorship:
                            type: object
                            properties:
                              id:
                                type: string
                                format: uuid
                              discountCode:
                                type: string
                              discountType:
                                type: string
                                enum:
                                  - percentage
                                  - fixed
                              discountValue:
                                type: number
                              discountAmount:
                                type: number
                              originalPrice:
                                type: number
                              finalPrice:
                                type: number
                            description: Sponsorship details if discount code was used
                          is_free_enrollment:
                            type: boolean
                            example: false
                            description: Always false for regular payments
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  '/payments/verify/{reference}':
    get:
      operationId: verify
      tags:
        - Payments
      summary: Verify Payment
      description: |
        Payment verification method. Called by frontend when user returns from Flutterwave.

        **Handles Both Payment Types:**
        - **Regular payments**: Verifies with Flutterwave and creates enrollment
        - **Free enrollments (100% discount)**: Already marked as successful, proceeds with enrollment

        **Verification Flow:**
        1. **Free Enrollments**: No verification needed, enrollment already exists
        2. **Regular Payments**: Verify with Flutterwave → Confirm payment → Create enrollment

        **Note**: This endpoint is primarily for regular payments. Free enrollments are handled
        immediately during initialization and don't require verification.
      security:
        - bearerAuth: []
      parameters:
        - name: reference
          in: path
          required: true
          schema:
            type: string
          description: Payment reference from our system (TMP_...)
      responses:
        '200':
          description: Payment verified and enrollment completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether verification was successful
                  message:
                    type: string
                    description: Success or error message
                  payment:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      amount:
                        type: number
                      status:
                        type: string
                      transactionId:
                        type: string
                    description: Payment details (null for free enrollments)
                  enrollment:
                    $ref: '#/components/schemas/Enrollment'
                    description: Created enrollment details
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /payments/user:
    get:
      operationId: getUserPayments
      tags:
        - Payments
      summary: Get current user's payment history
      description: |
        Retrieve payment history for the authenticated user.

        **Payment Types Included:**
        - Regular payments (with Flutterwave transaction details)
        - Free enrollments (marked with `is_free_enrollment: true`)
        - Failed payments
        - Cancelled payments
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Number of results to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: User payments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  payments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/payments/{id}':
    get:
      operationId: getPaymentById
      tags:
        - Payments
      summary: Get specific payment details
      description: |
        Retrieve detailed information about a specific payment.

        **Payment Details Include:**
        - Payment information (amount, status, method)
        - Sponsorship details (if applicable)
        - Enrollment information
        - Free enrollment flag (`is_free_enrollment`)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Payment ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /admin/payments:
    get:
      operationId: admin-payments
      tags:
        - Admin Payments
      summary: Get payment history with admin details
      description: Retrieve comprehensive payment history with admin-level details
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: status
          in: query
          description: Filter by payment status
          schema:
            type: string
            enum:
              - successful
              - failed
              - pending
        - name: paymentMethod
          in: query
          description: Filter by payment method
          schema:
            type: string
        - name: search
          in: query
          description: Search by user name or transaction ID
          schema:
            type: string
      responses:
        '200':
          description: Admin payment history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  payments:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        user_id:
                          type: string
                          format: uuid
                        first_name:
                          type: string
                        last_name:
                          type: string
                        email:
                          type: string
                        amount:
                          type: number
                        currency:
                          type: string
                        status:
                          type: string
                        payment_method:
                          type: string
                        reference:
                          type: string
                        transaction_id:
                          type: string
                        course_title:
                          type: string
                          nullable: true
                        class_title:
                          type: string
                          nullable: true
                        created_at:
                          type: string
                          format: date-time
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /admin/payments/stats:
    get:
      operationId: admin-payments-stats
      tags:
        - Admin Payments
      summary: Get comprehensive payment statistics
      description: Retrieve comprehensive payment statistics for admin dashboard
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period in days
          schema:
            type: integer
            default: 30
            minimum: 1
      responses:
        '200':
          description: Payment statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  overview:
                    type: object
                    properties:
                      total_payments:
                        type: integer
                        description: Total number of payments
                      total_revenue:
                        type: number
                        description: Total revenue generated
                      successful_payments:
                        type: integer
                        description: Number of successful payments
                      failed_payments:
                        type: integer
                        description: Number of failed payments
                      pending_payments:
                        type: integer
                        description: Number of pending payments
                      average_payment:
                        type: number
                        description: Average payment amount
                  methodBreakdown:
                    type: array
                    items:
                      type: object
                      properties:
                        payment_method:
                          type: string
                          description: Payment method used
                        count:
                          type: integer
                          description: Number of payments using this method
                        total_amount:
                          type: number
                          description: Total amount processed through this method
                  dailyStats:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                          description: Date in YYYY-MM-DD format
                        payment_count:
                          type: integer
                          description: Number of payments on this date
                        daily_revenue:
                          type: number
                          description: Revenue generated on this date
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /sponsorships:
    get:
      tags:
        - Sponsorships
      summary: Get all sponsorships for the authenticated sponsor
      description: Retrieve a list of sponsorships created by the authenticated sponsor with optional filtering
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by sponsorship status
          schema:
            type: string
            enum:
              - active
              - paused
              - expired
              - completed
        - name: courseId
          in: query
          description: Filter by course ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of sponsorships retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sponsorships:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        courseIds:
                          type: array
                          items:
                            type: string
                            format: uuid
                          description: Array of course IDs this sponsorship covers
                        courseTitles:
                          type: array
                          items:
                            type: string
                          description: Array of course titles
                        coursePrices:
                          type: array
                          items:
                            type: number
                          description: Array of course prices
                        discountCode:
                          type: string
                          description: Unique discount code for this sponsorship
                        discountType:
                          type: string
                          enum:
                            - percentage
                            - fixed
                          description: Type of discount (percentage or fixed amount)
                        discountValue:
                          type: number
                          description: Value of the discount
                        maxStudents:
                          type: integer
                          description: Maximum number of students who can use this sponsorship
                        studentsUsed:
                          type: integer
                          description: Number of students who have already used this sponsorship
                        remainingSpots:
                          type: integer
                          description: Number of remaining available spots
                        startDate:
                          type: string
                          format: date-time
                          description: When the sponsorship becomes active
                        endDate:
                          type: string
                          format: date-time
                          description: When the sponsorship expires
                        status:
                          type: string
                          enum:
                            - active
                            - paused
                            - expired
                            - completed
                          description: Current status of the sponsorship
                        completionRate:
                          type: number
                          nullable: true
                          description: Completion rate percentage
                        notes:
                          type: string
                          nullable: true
                          description: Additional notes about the sponsorship
                        isPaid:
                          type: boolean
                          description: Whether the sponsorship has been paid for (admin tracking)
                        paidAt:
                          type: string
                          format: date-time
                          nullable: true
                          description: When the sponsorship was marked as paid
                        paidAmount:
                          type: number
                          nullable: true
                          description: Amount paid for the sponsorship
                        paidCurrency:
                          type: string
                          description: Currency of the payment
                        createdBy:
                          type: string
                          enum:
                            - sponsor
                            - admin
                          description: Who created the sponsorship
                        adminNote:
                          type: string
                          nullable: true
                          description: Internal admin note about the sponsorship
                        invoiceNumber:
                          type: string
                          nullable: true
                          description: Generated invoice number for the sponsorship
                        createdAt:
                          type: string
                          format: date-time
                          description: When the sponsorship was created
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - Sponsorships
      summary: Create a new sponsorship
      description: Create a new sponsorship for one or more courses (sponsor only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - courseIds
                - discountType
                - discountValue
                - maxStudents
                - duration
              properties:
                courseIds:
                  type: array
                  minItems: 1
                  items:
                    type: string
                    format: uuid
                  description: Array of course IDs to sponsor (at least one required)
                discountType:
                  type: string
                  enum:
                    - percentage
                    - fixed
                  description: Type of discount to apply
                discountValue:
                  type: number
                  minimum: 0
                  description: Value of the discount (percentage or fixed amount)
                maxStudents:
                  type: integer
                  minimum: 1
                  description: Maximum number of students who can use this sponsorship
                duration:
                  type: integer
                  minimum: 1
                  maximum: 12
                  description: Duration of sponsorship in months (1-12)
                notes:
                  type: string
                  description: Additional notes about the sponsorship
      responses:
        '201':
          description: Sponsorship created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  sponsorId:
                    type: string
                    format: uuid
                  courseIds:
                    type: array
                    items:
                      type: string
                      format: uuid
                  discountCode:
                    type: string
                    description: Generated unique discount code
                  discountType:
                    type: string
                    enum:
                      - percentage
                      - fixed
                  discountValue:
                    type: number
                  maxStudents:
                    type: integer
                  studentsUsed:
                    type: integer
                  startDate:
                    type: string
                    format: date-time
                  endDate:
                    type: string
                    format: date-time
                  status:
                    type: string
                  completionRate:
                    type: number
                    nullable: true
                  createdAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/sponsorships/{id}':
    get:
      tags:
        - Sponsorships
      summary: Get details of a specific sponsorship
      description: Retrieve detailed information about a specific sponsorship
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Sponsorship ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Sponsorship details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  sponsorId:
                    type: string
                    format: uuid
                  sponsorName:
                    type: string
                    description: Full name of the sponsor
                  courseIds:
                    type: array
                    items:
                      type: string
                      format: uuid
                  courseTitles:
                    type: array
                    items:
                      type: string
                  coursePrices:
                    type: array
                    items:
                      type: number
                  courseDescriptions:
                    type: array
                    items:
                      type: string
                  discountCode:
                    type: string
                  discountType:
                    type: string
                    enum:
                      - percentage
                      - fixed
                  discountValue:
                    type: number
                  maxStudents:
                    type: integer
                  studentsUsed:
                    type: integer
                  remainingSpots:
                    type: integer
                  startDate:
                    type: string
                    format: date-time
                  endDate:
                    type: string
                    format: date-time
                  status:
                    type: string
                    enum:
                      - active
                      - paused
                      - expired
                      - completed
                  completionRate:
                    type: number
                    nullable: true
                  notes:
                    type: string
                    nullable: true
                  isPaid:
                    type: boolean
                    description: Whether the sponsorship has been paid for (admin tracking)
                  paidAt:
                    type: string
                    format: date-time
                    nullable: true
                    description: When the sponsorship was marked as paid
                  paidAmount:
                    type: number
                    nullable: true
                    description: Amount paid for the sponsorship
                  paidCurrency:
                    type: string
                    description: Currency of the payment
                  createdBy:
                    type: string
                    enum:
                      - sponsor
                      - admin
                    description: Who created the sponsorship
                  adminNote:
                    type: string
                    nullable: true
                    description: Internal admin note about the sponsorship
                  invoiceNumber:
                    type: string
                    nullable: true
                    description: Generated invoice number for the sponsorship
                  createdAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Sponsorships
      summary: Update sponsorship details
      description: Update an existing sponsorship (owner/admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Sponsorship ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - active
                    - paused
                    - expired
                    - completed
                  description: New status for the sponsorship
                notes:
                  type: string
                  description: Updated notes for the sponsorship
                courseIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Optional new array of course IDs to replace the sponsorship's linked courses
      responses:
        '200':
          description: Sponsorship updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum:
                      - active
                      - paused
                      - expired
                      - completed
                  notes:
                    type: string
                    nullable: true
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Sponsorships
      summary: Delete a sponsorship
      description: Delete a sponsorship (owner/admin only). Cannot delete if already used.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Sponsorship ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Sponsorship deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Sponsorship deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/sponsorships/{id}/use':
    post:
      tags:
        - Sponsorships
      summary: Use a sponsorship code for enrollment
      description: Apply a sponsorship code to enroll in a course
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Sponsorship ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - studentId
                - courseId
              properties:
                studentId:
                  type: string
                  format: uuid
                  description: ID of the student using the sponsorship
                courseId:
                  type: string
                  format: uuid
                  description: ID of the course to enroll in
      responses:
        '200':
          description: Sponsorship code applied successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  originalPrice:
                    type: number
                    description: Original price before discount
                  discountAmount:
                    type: number
                    description: Amount of discount applied
                  finalPrice:
                    type: number
                    description: Final price after discount
                  message:
                    type: string
                    example: Sponsorship code applied successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/sponsorships/{id}/stats':
    get:
      tags:
        - Sponsorships
      summary: Get detailed sponsorship statistics
      description: Retrieve comprehensive statistics for a specific sponsorship (owner/admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Sponsorship ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Sponsorship statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sponsorship:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      courseTitle:
                        type: string
                        description: Comma-separated list of course titles
                      discountCode:
                        type: string
                      discountType:
                        type: string
                        enum:
                          - percentage
                          - fixed
                      discountValue:
                        type: number
                      maxStudents:
                        type: integer
                      studentsUsed:
                        type: integer
                      completionRate:
                        type: number
                        nullable: true
                      status:
                        type: string
                        enum:
                          - active
                          - paused
                          - expired
                          - completed
                  stats:
                    type: object
                    properties:
                      totalUsage:
                        type: integer
                        description: Total number of times sponsorship was used
                      totalDiscountGiven:
                        type: number
                        description: Total amount of discount given
                      averageFinalPrice:
                        type: number
                        description: Average final price paid by students
                      utilizationRate:
                        type: string
                        description: Percentage of sponsorship utilization
                  monthlyStats:
                    type: array
                    items:
                      type: object
                      properties:
                        month:
                          type: string
                          format: date-time
                          description: Month in YYYY-MM format
                        studentsEnrolled:
                          type: integer
                          description: Number of students enrolled in that month
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/sponsorships/{id}/email':
    post:
      tags:
        - Sponsorships
      summary: Send sponsorship details via email
      description: Send sponsorship information to a recipient via email (owner/admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Sponsorship ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipientEmail
              properties:
                recipientEmail:
                  type: string
                  format: email
                  description: Email address of the recipient
                isForRecipient:
                  type: boolean
                  default: true
                  description: Whether the email is intended for the recipient
                customMessage:
                  type: string
                  description: Custom message to include in the email
      responses:
        '200':
          description: Sponsorship email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Sponsorship details sent successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/sponsorships/code/{discountCode}':
    get:
      tags:
        - Sponsorships
      summary: Validate a sponsorship discount code
      description: |
        Public endpoint to validate a sponsorship discount code.

        **Frontend Integration Flow:**
        1. **User enters discount code** in checkout UI
        2. **Validate code** via this endpoint (no auth required)
        3. **Check validity** using `valid` field and `isExpired`/`isFull` flags
        4. **Extract sponsorship UUID** from `sponsorship.id` (NOT the discount code)
        5. **Proceed to enrollment** using the sponsorship UUID

        **Enrollment Flow:**
        - **100% discount**: Use POST `/courses/{courseId}/enroll` with `{ sponsorshipId }`
        - **Partial discount**: Use POST `/payments/initialize` with sponsorship details

        **Key Points:**
        - **NEVER send discount codes directly** to enrollment endpoints
        - **ALWAYS validate first** to get the sponsorship UUID
        - **Use sponsorship.id** (UUID), not the discount code string
        - **Check isExpired and isFull** before allowing enrollment
        - **100% discounts** result in immediate free enrollment
        - **Partial discounts** require payment processing

        **Error Handling:**
        - Invalid codes: Show error message and disable continue
        - Expired codes: Show "expired" message and disable enrollment
        - Full capacity: Show "full" message and disable enrollment
        - Wrong course: Show "wrong course" message and disable enrollment
      parameters:
        - name: discountCode
          in: path
          required: true
          description: 'Discount code to validate (e.g., "SPONSOR123")'
          schema:
            type: string
      responses:
        '200':
          description: Sponsorship code validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    description: Whether the code is valid and can be used
                  sponsorship:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: |
                          **IMPORTANT**: Use this UUID as `sponsorshipId` when enrolling.
                          This is NOT the discount code - it's the internal sponsorship ID.
                      courseNames:
                        type: array
                        items:
                          type: string
                        description: Array of course names this sponsorship covers
                      coursePrices:
                        type: array
                        items:
                          type: number
                        description: Array of course prices
                      courseIds:
                        type: array
                        items:
                          type: string
                          format: uuid
                        description: Array of course IDs
                      discountType:
                        type: string
                        enum:
                          - percentage
                          - fixed
                        description: Type of discount (percentage or fixed amount)
                      discountValue:
                        type: number
                        description: Value of the discount (percentage as decimal or fixed amount)
                      maxStudents:
                        type: integer
                        description: Maximum number of students who can use this sponsorship
                      studentsUsed:
                        type: integer
                        description: Number of students who have already used this sponsorship
                      remainingSpots:
                        type: integer
                        description: Number of remaining available spots
                      startDate:
                        type: string
                        format: date-time
                        description: When the sponsorship becomes active
                      endDate:
                        type: string
                        format: date-time
                        description: When the sponsorship expires
                      isExpired:
                        type: boolean
                        description: Whether the sponsorship has expired (check this before enrollment)
                      isFull:
                        type: boolean
                        description: Whether the sponsorship is full (check this before enrollment)
                  message:
                    type: string
                    description: Human-readable message about the validation result
              examples:
                valid_sponsorship:
                  summary: Valid sponsorship code response
                  value:
                    valid: true
                    sponsorship:
                      id: 550e8400-e29b-41d4-a716-446655440000
                      courseNames:
                        - JavaScript Fundamentals
                        - Advanced JavaScript
                      coursePrices:
                        - 99.99
                        - 149.99
                      courseIds:
                        - uuid1
                        - uuid2
                      discountType: percentage
                      discountValue: 20
                      maxStudents: 50
                      studentsUsed: 25
                      remainingSpots: 25
                      startDate: '2024-01-01T00:00:00Z'
                      endDate: '2024-12-31T23:59:59Z'
                      isExpired: false
                      isFull: false
                    message: Valid sponsorship code for JavaScript Fundamentals and Advanced JavaScript courses
                expired_sponsorship:
                  summary: Expired sponsorship code response
                  value:
                    valid: false
                    sponsorship:
                      id: 550e8400-e29b-41d4-a716-446655440001
                      courseNames:
                        - Python Basics
                      coursePrices:
                        - 79.99
                      courseIds:
                        - uuid3
                      discountType: percentage
                      discountValue: 15
                      maxStudents: 30
                      studentsUsed: 30
                      remainingSpots: 0
                      startDate: '2024-01-01T00:00:00Z'
                      endDate: '2024-06-30T23:59:59Z'
                      isExpired: true
                      isFull: true
                    message: This sponsorship code has expired and is no longer valid
        '400':
          $ref: '#/components/responses/BadRequest'
  /admin/sponsorships:
    post:
      tags:
        - Sponsorships
      summary: Create a new sponsorship as admin
      description: |
        Create a new sponsorship with admin privileges. This allows admins to create sponsorships
        that may not pass through a paywall, track whether they are paid, and generate invoice data.

        **Admin Features:**
        - Sets `created_by = 'admin'`
        - Supports multi-course sponsorships via `courseIds` array
        - Automatically generates invoice number
        - Tracks payment status for offline payments
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sponsorId
                - courseIds
                - discountType
                - discountValue
                - maxStudents
                - startDate
                - endDate
              properties:
                sponsorId:
                  type: string
                  format: uuid
                  description: ID of the sponsor
                courseIds:
                  type: array
                  minItems: 1
                  items:
                    type: string
                    format: uuid
                  description: Array of course IDs to sponsor (at least one required)
                discountType:
                  type: string
                  enum:
                    - percentage
                    - fixed
                  description: Type of discount to apply
                discountValue:
                  type: number
                  minimum: 0
                  description: Value of the discount (percentage or fixed amount)
                maxStudents:
                  type: integer
                  minimum: 1
                  description: Maximum number of students who can use this sponsorship
                startDate:
                  type: string
                  format: date
                  description: Start date when the sponsorship becomes active
                endDate:
                  type: string
                  format: date
                  description: End date when the sponsorship expires
                notes:
                  type: string
                  description: Additional notes about the sponsorship
                adminNote:
                  type: string
                  description: Internal admin note about the sponsorship
      responses:
        '201':
          description: Sponsorship created successfully by admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  sponsorId:
                    type: string
                    format: uuid
                  courseIds:
                    type: array
                    items:
                      type: string
                      format: uuid
                  courseTitles:
                    type: array
                    items:
                      type: string
                  discountCode:
                    type: string
                    description: Generated unique discount code
                  discountType:
                    type: string
                    enum:
                      - percentage
                      - fixed
                  discountValue:
                    type: number
                  maxStudents:
                    type: integer
                  startDate:
                    type: string
                    format: date-time
                  endDate:
                    type: string
                    format: date-time
                  createdBy:
                    type: string
                    enum:
                      - admin
                  adminNote:
                    type: string
                    nullable: true
                  invoiceNumber:
                    type: string
                    description: Generated invoice number
                  isPaid:
                    type: boolean
                    default: false
                  createdAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/admin/sponsorships/{id}/payment-status':
    get:
      tags:
        - Sponsorships
      summary: Get sponsorship payment status
      description: |
        Retrieve the payment status of a sponsorship for admin tracking and reporting.
        This endpoint provides information about whether a sponsorship has been paid for,
        when it was paid, and payment details.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Sponsorship ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Sponsorship payment status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  isPaid:
                    type: boolean
                    description: Whether the sponsorship has been paid for
                  paidAt:
                    type: string
                    format: date-time
                    nullable: true
                    description: When the sponsorship was marked as paid
                  paidAmount:
                    type: number
                    nullable: true
                    description: Amount paid for the sponsorship
                  paidCurrency:
                    type: string
                    default: USD
                    description: Currency of the payment
                  paymentId:
                    type: string
                    format: uuid
                    nullable: true
                    description: Reference to payment record
                  paymentReference:
                    type: string
                    nullable: true
                    description: External payment reference
                  invoiceNumber:
                    type: string
                    nullable: true
                    description: Generated invoice number
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/admin/sponsorships/{id}/mark-paid':
    post:
      tags:
        - Sponsorships
      summary: Mark sponsorship invoice as paid
      description: |
        Mark a sponsorship as paid for admin tracking. This is used when sponsors pay offline
        or through other payment methods not processed through the system.

        **Use Cases:**
        - Bank transfers
        - Offline payments
        - Manual payment recording
        - Invoice reconciliation
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Sponsorship ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  minimum: 0.01
                  description: 'Amount paid (optional, will use calculated amount if not provided)'
                currency:
                  type: string
                  default: USD
                  description: Currency of the payment
                paymentId:
                  type: string
                  format: uuid
                  description: Reference to payment record (optional)
                reference:
                  type: string
                  description: 'External payment reference (e.g., bank transfer reference)'
                paidAt:
                  type: string
                  format: date-time
                  description: When the payment was made (defaults to current time if not provided)
      responses:
        '200':
          description: Sponsorship marked as paid successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  isPaid:
                    type: boolean
                    example: true
                  paidAt:
                    type: string
                    format: date-time
                  paidAmount:
                    type: number
                  paidCurrency:
                    type: string
                  paymentId:
                    type: string
                    format: uuid
                    nullable: true
                  paymentReference:
                    type: string
                    nullable: true
                  invoiceNumber:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/admin/sponsorships/{id}/invoice':
    get:
      tags:
        - Sponsorships
      summary: Generate sponsorship invoice
      description: |
        Generate a comprehensive invoice for a sponsorship including sponsor info, courses,
        sponsorship terms, and payment metadata.

        **Features:**
        - Automatically generates `invoice_number` if missing
        - Calculates invoice amount based on course prices and max students
        - Includes sponsor details and course information
        - Shows payment status and metadata

        **Invoice Number Format:** `INV-YYMM-<sponsorshipIdPrefix>`
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Sponsorship ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Sponsorship invoice generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoiceNumber:
                    type: string
                    description: Generated invoice number
                  issueDate:
                    type: string
                    format: date-time
                    description: When the invoice was issued
                  dueDate:
                    type: string
                    format: date-time
                    description: When the invoice is due
                  status:
                    type: string
                    enum:
                      - unpaid
                      - paid
                    description: Current payment status
                  sponsor:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      email:
                        type: string
                        format: email
                  sponsorship:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      discountCode:
                        type: string
                      discountType:
                        type: string
                        enum:
                          - percentage
                          - fixed
                      discountValue:
                        type: number
                      maxStudents:
                        type: integer
                      startDate:
                        type: string
                        format: date
                      endDate:
                        type: string
                        format: date
                      createdBy:
                        type: string
                        enum:
                          - sponsor
                          - admin
                      adminNote:
                        type: string
                        nullable: true
                  courses:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        price:
                          type: number
                  amount:
                    type: number
                    description: Calculated invoice amount
                  payment:
                    type: object
                    properties:
                      isPaid:
                        type: boolean
                      paidAt:
                        type: string
                        format: date-time
                        nullable: true
                      amount:
                        type: number
                        nullable: true
                      currency:
                        type: string
                      paymentId:
                        type: string
                        format: uuid
                        nullable: true
                      reference:
                        type: string
                        nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /sponsorship-opportunities:
    get:
      tags:
        - Sponsorship Opportunities
      summary: Get list of sponsorship opportunities
      description: Retrieve a list of available sponsorship opportunities (public endpoint)
      parameters:
        - name: isActive
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: urgency
          in: query
          description: Filter by urgency level
          schema:
            type: string
            enum:
              - low
              - medium
              - high
        - name: limit
          in: query
          description: Number of results to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of opportunities retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  opportunities:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        courseId:
                          type: string
                          format: uuid
                        courseName:
                          type: string
                        courseDescription:
                          type: string
                        courseDuration:
                          type: string
                        courseTopic:
                          type: string
                        instructor:
                          type: string
                          nullable: true
                        instructorAvatar:
                          type: string
                          nullable: true
                        targetStudents:
                          type: integer
                        fundingGoal:
                          type: number
                        fundingRaised:
                          type: number
                        fundingProgress:
                          type: string
                          description: 'Percentage as string (e.g., "75.50")'
                        urgency:
                          type: string
                          enum:
                            - low
                            - medium
                            - high
                        demographics:
                          type: string
                          nullable: true
                        impactDescription:
                          type: string
                          nullable: true
                        isActive:
                          type: boolean
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags:
        - Sponsorship Opportunities
      summary: Create a new sponsorship opportunity
      description: Create a new sponsorship opportunity (instructor/admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - courseId
                - targetStudents
                - fundingGoal
                - urgency
                - demographics
                - impactDescription
              properties:
                courseId:
                  type: string
                  format: uuid
                  description: ID of the course seeking sponsorship
                targetStudents:
                  type: integer
                  minimum: 1
                  description: Target number of students to sponsor
                fundingGoal:
                  type: number
                  minimum: 0
                  description: Funding goal amount
                urgency:
                  type: string
                  enum:
                    - low
                    - medium
                    - high
                  description: Urgency level of the opportunity
                demographics:
                  type: string
                  description: Target student demographics
                impactDescription:
                  type: string
                  description: Description of the impact this sponsorship will have
      responses:
        '201':
          description: Opportunity created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  courseId:
                    type: string
                    format: uuid
                  targetStudents:
                    type: integer
                  fundingGoal:
                    type: number
                  fundingRaised:
                    type: number
                  urgency:
                    type: string
                    enum:
                      - low
                      - medium
                      - high
                  demographics:
                    type: string
                    nullable: true
                  impactDescription:
                    type: string
                    nullable: true
                  isActive:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/sponsorship-opportunities/{id}':
    get:
      tags:
        - Sponsorship Opportunities
      summary: Get details of a specific opportunity
      description: Retrieve detailed information about a specific sponsorship opportunity (public endpoint)
      parameters:
        - name: id
          in: path
          required: true
          description: Opportunity ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Opportunity details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  courseId:
                    type: string
                    format: uuid
                  courseName:
                    type: string
                  courseDescription:
                    type: string
                  courseDuration:
                    type: string
                  courseTopic:
                    type: string
                  coursePrice:
                    type: number
                  instructor:
                    type: string
                    nullable: true
                  instructorAvatar:
                    type: string
                    nullable: true
                  instructorBio:
                    type: string
                    nullable: true
                  targetStudents:
                    type: integer
                  fundingGoal:
                    type: number
                  fundingRaised:
                    type: number
                  fundingProgress:
                    type: string
                    description: 'Percentage as string (e.g., "75.50")'
                  urgency:
                    type: string
                    enum:
                      - low
                      - medium
                      - high
                  demographics:
                    type: string
                    nullable: true
                  impactDescription:
                    type: string
                    nullable: true
                  isActive:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Sponsorship Opportunities
      summary: Update opportunity details
      description: Update an existing opportunity (owner/admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Opportunity ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetStudents:
                  type: integer
                  minimum: 1
                  description: Updated target number of students
                fundingGoal:
                  type: number
                  minimum: 0
                  description: Updated funding goal amount
                urgency:
                  type: string
                  enum:
                    - low
                    - medium
                    - high
                  description: Updated urgency level
                demographics:
                  type: string
                  description: Updated target student demographics
                impactDescription:
                  type: string
                  description: Updated impact description
                isActive:
                  type: boolean
                  description: Whether the opportunity is active
      responses:
        '200':
          description: Opportunity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  targetStudents:
                    type: integer
                  fundingGoal:
                    type: number
                  fundingRaised:
                    type: number
                  urgency:
                    type: string
                    enum:
                      - low
                      - medium
                      - high
                  demographics:
                    type: string
                    nullable: true
                  impactDescription:
                    type: string
                    nullable: true
                  isActive:
                    type: boolean
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Sponsorship Opportunities
      summary: Delete an opportunity
      description: Delete a sponsorship opportunity (owner/admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Opportunity ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Opportunity deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Sponsorship opportunity deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/sponsorship-opportunities/{id}/contribute':
    post:
      tags:
        - Sponsorship Opportunities
      summary: Contribute to a sponsorship opportunity
      description: Make a contribution to a sponsorship opportunity
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Opportunity ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: number
                  minimum: 0.01
                  description: Contribution amount (must be greater than 0)
                message:
                  type: string
                  description: Optional message with the contribution
      responses:
        '200':
          description: Contribution recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  amount:
                    type: number
                    description: Contribution amount
                  newFundingRaised:
                    type: number
                    description: Updated total funding raised
                  message:
                    type: string
                    example: Contribution recorded successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /discussions/recent:
    get:
      tags:
        - Discussions
      summary: Get recent discussions (public endpoint)
      description: 'Retrieve recent discussions with optional filtering by course, class, author, and sorting'
      parameters:
        - name: course_id
          in: query
          description: Filter by course ID
          schema:
            type: string
            format: uuid
        - name: class_id
          in: query
          description: Filter by class ID
          schema:
            type: string
            format: uuid
        - name: author
          in: query
          description: Filter by author name (partial match)
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum:
              - created_at
              - title
              - reply_count
              - view_count
            default: created_at
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Recent discussions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  discussions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        content:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
                        replyCount:
                          type: integer
                        viewCount:
                          type: integer
                        isPinned:
                          type: boolean
                        isLocked:
                          type: boolean
                        author:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            firstName:
                              type: string
                            lastName:
                              type: string
                            avatarUrl:
                              type: string
                        course:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                        class:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
  /discussions:
    get:
      tags:
        - Discussions
      summary: Get discussions with filters and pagination
      description: 'Retrieve a list of discussions with optional filtering by category, course, class, and tags'
      parameters:
        - name: category
          in: query
          description: Filter by discussion category
          schema:
            type: string
            enum:
              - general
              - course
              - lesson
              - class
              - question
              - help
              - feedback
        - name: type
          in: query
          description: Alias for category parameter
          schema:
            type: string
            enum:
              - general
              - course
              - lesson
              - class
              - question
              - help
              - feedback
        - name: courseId
          in: query
          description: Filter by course ID for course-specific discussions
          schema:
            type: string
            format: uuid
        - name: lessonId
          in: query
          description: Filter by lesson ID for lesson-specific discussions
          schema:
            type: string
            format: uuid
        - name: classId
          in: query
          description: Filter by class ID for class-specific discussions
          schema:
            type: string
            format: uuid
        - name: authorId
          in: query
          description: Filter by author ID
          schema:
            type: string
            format: uuid
        - name: search
          in: query
          description: Search in title and content
          schema:
            type: string
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum:
              - created_at
              - title
              - reply_count
              - view_count
              - last_activity_at
              - likes_count
            default: last_activity_at
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of discussions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  discussions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        content:
                          type: string
                        category:
                          type: string
                        authorId:
                          type: string
                          format: uuid
                        authorName:
                          type: string
                        authorAvatar:
                          type: string
                        courseId:
                          type: string
                          format: uuid
                          nullable: true
                        courseTitle:
                          type: string
                          nullable: true
                        lessonId:
                          type: string
                          format: uuid
                          nullable: true
                        lessonTitle:
                          type: string
                          nullable: true
                        classId:
                          type: string
                          format: uuid
                          nullable: true
                        classTitle:
                          type: string
                          nullable: true
                        tags:
                          type: array
                          items:
                            type: string
                        isPinned:
                          type: boolean
                        replyCount:
                          type: integer
                        likesCount:
                          type: integer
                        lastActivityAt:
                          type: string
                          format: date-time
                        createdAt:
                          type: string
                          format: date-time
    post:
      tags:
        - Discussions
      summary: Create a new discussion
      description: Create a new discussion with optional course or class association
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
                - category
              properties:
                title:
                  type: string
                  minLength: 1
                  description: Discussion title
                content:
                  type: string
                  minLength: 10
                  description: Discussion content
                category:
                  type: string
                  enum:
                    - general
                    - course
                    - lesson
                    - class
                    - question
                    - help
                    - feedback
                  description: Discussion category
                courseId:
                  type: string
                  format: uuid
                  description: Course ID for course-specific discussions
                lessonId:
                  type: string
                  format: uuid
                  description: Lesson ID for lesson-specific discussions
                classId:
                  type: string
                  format: uuid
                  description: Class ID for class-specific discussions
                tags:
                  type: array
                  items:
                    type: string
                  description: Array of tags for better organization
      responses:
        '201':
          description: Discussion created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  content:
                    type: string
                  category:
                    type: string
                  authorId:
                    type: string
                    format: uuid
                  courseId:
                    type: string
                    format: uuid
                    nullable: true
                  lessonId:
                    type: string
                    format: uuid
                    nullable: true
                  classId:
                    type: string
                    format: uuid
                    nullable: true
                  tags:
                    type: array
                    items:
                      type: string
                  isPinned:
                    type: boolean
                  replyCount:
                    type: integer
                  createdAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /discussions/categories:
    get:
      tags:
        - Discussions
      summary: Get available discussion categories
      description: Retrieve all available discussion categories
      parameters:
        - name: includeInactive
          in: query
          description: Include inactive categories
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Discussion categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        key:
                          type: string
                          description: Category key identifier
                        name:
                          type: string
                          description: Category display name
                        description:
                          type: string
                          nullable: true
                          description: Category description
                        icon:
                          type: string
                          nullable: true
                          description: Category icon (emoji)
                        color:
                          type: string
                          nullable: true
                          description: Category color (hex)
                        isActive:
                          type: boolean
                          description: Whether category is active
                        sortOrder:
                          type: integer
                          description: Sort order for display
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
    post:
      tags:
        - Discussions
      summary: Create a new discussion category (admin only)
      description: Create a new discussion category for better organization
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - key
                - name
              properties:
                key:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: Category key identifier
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                  description: Category display name
                description:
                  type: string
                  maxLength: 1000
                  description: Category description
                icon:
                  type: string
                  maxLength: 10
                  description: Category icon (emoji)
                color:
                  type: string
                  pattern: '^#[0-9A-Fa-f]{6}$'
                  description: Category color (hex format)
                sortOrder:
                  type: integer
                  minimum: 0
                  description: Sort order for display
                isActive:
                  type: boolean
                  description: Whether category is active
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  key:
                    type: string
                  name:
                    type: string
                  description:
                    type: string
                    nullable: true
                  icon:
                    type: string
                    nullable: true
                  color:
                    type: string
                    nullable: true
                  isActive:
                    type: boolean
                  sortOrder:
                    type: integer
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/discussions/categories/{id}':
    put:
      tags:
        - Discussions
      summary: Update discussion category (admin only)
      description: Update an existing discussion category
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                  description: Updated category name
                description:
                  type: string
                  maxLength: 1000
                  description: Updated category description
                icon:
                  type: string
                  maxLength: 10
                  description: Updated category icon (emoji)
                color:
                  type: string
                  pattern: '^#[0-9A-Fa-f]{6}$'
                  description: Updated category color (hex format)
                sortOrder:
                  type: integer
                  minimum: 0
                  description: Updated sort order
                isActive:
                  type: boolean
                  description: Updated active status
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  key:
                    type: string
                  name:
                    type: string
                  description:
                    type: string
                    nullable: true
                  icon:
                    type: string
                    nullable: true
                  color:
                    type: string
                    nullable: true
                  isActive:
                    type: boolean
                  sortOrder:
                    type: integer
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Discussions
      summary: Delete discussion category (admin only)
      description: Delete a discussion category
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category deleted successfully
        '400':
          description: Category is in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Category In Use
                  message:
                    type: string
                    example: 'Cannot delete category: X discussions are using it'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/discussions/categories/{id}/stats':
    get:
      tags:
        - Discussions
      summary: Get discussion category statistics (admin only)
      description: Retrieve statistics for a specific discussion category
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      key:
                        type: string
                      name:
                        type: string
                  statistics:
                    type: object
                    properties:
                      totalDiscussions:
                        type: integer
                        description: Total number of discussions in this category
                      discussionsLast30Days:
                        type: integer
                        description: Discussions created in last 30 days
                      discussionsLast7Days:
                        type: integer
                        description: Discussions created in last 7 days
                      averageReplies:
                        type: number
                        description: Average replies per discussion
                      totalViews:
                        type: integer
                        description: Total view count
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /discussions/tags:
    get:
      tags:
        - Discussions
      summary: Get popular discussion tags
      description: Retrieve popular discussion tags with usage counts
      parameters:
        - name: limit
          in: query
          description: Number of tags to return
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Popular tags retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    items:
                      type: object
                      properties:
                        tag:
                          type: string
                          description: Tag name
                        count:
                          type: integer
                          description: Number of times this tag is used
  '/discussions/{id}':
    get:
      tags:
        - Discussions
      summary: Get discussion details
      description: Retrieve detailed information about a specific discussion
      parameters:
        - name: id
          in: path
          required: true
          description: Discussion ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Discussion details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  content:
                    type: string
                  category:
                    type: string
                  authorId:
                    type: string
                    format: uuid
                  authorName:
                    type: string
                  authorAvatar:
                    type: string
                  courseId:
                    type: string
                    format: uuid
                    nullable: true
                  courseTitle:
                    type: string
                    nullable: true
                  lessonId:
                    type: string
                    format: uuid
                    nullable: true
                  lessonTitle:
                    type: string
                    nullable: true
                  classId:
                    type: string
                    format: uuid
                    nullable: true
                  classTitle:
                    type: string
                    nullable: true
                  tags:
                    type: array
                    items:
                      type: string
                  isPinned:
                    type: boolean
                  replyCount:
                    type: integer
                  likesCount:
                    type: integer
                  lastActivityAt:
                    type: string
                    format: date-time
                  createdAt:
                    type: string
                    format: date-time
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Discussions
      summary: Update discussion details
      description: Update an existing discussion (owner only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Discussion ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  description: Updated discussion title
                content:
                  type: string
                  minLength: 10
                  description: Updated discussion content
                category:
                  type: string
                  enum:
                    - general
                    - course
                    - lesson
                    - class
                    - question
                    - help
                    - feedback
                  description: Updated discussion category
                isPinned:
                  type: boolean
                  description: Whether discussion should be pinned
      responses:
        '200':
          description: Discussion updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  content:
                    type: string
                  category:
                    type: string
                  isPinned:
                    type: boolean
                  lastActivityAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Discussions
      summary: Delete a discussion
      description: Delete a discussion (owner or admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Discussion ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Discussion deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Discussion deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/discussions/{id}/replies':
    get:
      tags:
        - Discussions
      summary: Get replies for a discussion
      description: Retrieve all replies for a specific discussion
      parameters:
        - name: id
          in: path
          required: true
          description: Discussion ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Discussion replies retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  replies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        discussionId:
                          type: string
                          format: uuid
                        authorId:
                          type: string
                          format: uuid
                        authorName:
                          type: string
                        authorAvatar:
                          type: string
                        content:
                          type: string
                        parentReplyId:
                          type: string
                          format: uuid
                          nullable: true
                        createdAt:
                          type: string
                          format: date-time
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Discussions
      summary: Add a reply to a discussion
      description: Add a new reply to an existing discussion
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Discussion ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  minLength: 1
                  description: Reply content
                parentReplyId:
                  type: string
                  format: uuid
                  description: Parent reply ID for nested replies
      responses:
        '201':
          description: Reply added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  discussionId:
                    type: string
                    format: uuid
                  authorId:
                    type: string
                    format: uuid
                  content:
                    type: string
                  parentReplyId:
                    type: string
                    format: uuid
                    nullable: true
                  createdAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/discussions/{id}/like':
    post:
      tags:
        - Discussions
      summary: Like a discussion
      description: Like a discussion (toggle like status)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Discussion ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Discussion liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  liked:
                    type: boolean
                    description: Current like status
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Discussions
      summary: Unlike a discussion
      description: Remove like from a discussion
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Discussion ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Discussion unliked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  liked:
                    type: boolean
                    description: Current like status (false)
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /certifications:
    get:
      tags:
        - Certifications
      summary: Get all certifications with filtering
      description: 'Retrieve all certifications with optional filtering by userId, courseId, classId, status, and pagination'
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: query
          description: Filter by user ID
          schema:
            type: string
            format: uuid
        - name: courseId
          in: query
          description: Filter by course ID
          schema:
            type: string
            format: uuid
        - name: classId
          in: query
          description: Filter by class ID
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: Filter by certification status
          schema:
            type: string
        - name: limit
          in: query
          description: Number of results to return
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Certifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  certifications:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        userId:
                          type: string
                          format: uuid
                        userName:
                          type: string
                        userEmail:
                          type: string
                        certificationName:
                          type: string
                        issuer:
                          type: string
                        issuedDate:
                          type: string
                          format: date-time
                        expiryDate:
                          type: string
                          format: date-time
                        certificateUrl:
                          type: string
                        verificationCode:
                          type: string
                        status:
                          type: string
                        courseId:
                          type: string
                          format: uuid
                        courseTitle:
                          type: string
                        classId:
                          type: string
                          format: uuid
                        classTitle:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Certifications
      summary: Create new certification
      description: Create a new certification (instructor/admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - certificationName
                - issuer
                - issuedDate
              properties:
                userId:
                  type: string
                  format: uuid
                  description: User ID to issue certification to
                certificationName:
                  type: string
                  minLength: 1
                  description: Name of the certification
                issuer:
                  type: string
                  minLength: 1
                  description: Organization issuing the certification
                issuedDate:
                  type: string
                  format: date-time
                  description: Date when certification was issued
                expiryDate:
                  type: string
                  format: date-time
                  description: Optional expiry date
                courseId:
                  type: string
                  format: uuid
                  description: Associated course ID
                classId:
                  type: string
                  format: uuid
                  description: Associated class ID
                certificateUrl:
                  type: string
                  format: uri
                  description: URL to certificate file
      responses:
        '201':
          description: Certification created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  userId:
                    type: string
                    format: uuid
                  courseId:
                    type: string
                    format: uuid
                  classId:
                    type: string
                    format: uuid
                  certificationName:
                    type: string
                  issuer:
                    type: string
                  issuedDate:
                    type: string
                    format: date-time
                  expiryDate:
                    type: string
                    format: date-time
                  certificateUrl:
                    type: string
                  verificationCode:
                    type: string
                  status:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/certifications/{id}':
    get:
      tags:
        - Certifications
      summary: Get certification by ID
      description: Retrieve a specific certification by its ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Certification ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Certification retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  userId:
                    type: string
                    format: uuid
                  userName:
                    type: string
                  userEmail:
                    type: string
                  certificationName:
                    type: string
                  issuer:
                    type: string
                  issuedDate:
                    type: string
                    format: date-time
                  expiryDate:
                    type: string
                    format: date-time
                  certificateUrl:
                    type: string
                  verificationCode:
                    type: string
                  status:
                    type: string
                  courseId:
                    type: string
                    format: uuid
                  courseTitle:
                    type: string
                  classId:
                    type: string
                    format: uuid
                  classTitle:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Certifications
      summary: Update certification
      description: Update an existing certification (owner or admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Certification ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                certificationName:
                  type: string
                  minLength: 1
                  description: Name of the certification
                issuer:
                  type: string
                  minLength: 1
                  description: Organization issuing the certification
                issuedDate:
                  type: string
                  format: date-time
                  description: Date when certification was issued
                expiryDate:
                  type: string
                  format: date-time
                  description: Optional expiry date
                certificateUrl:
                  type: string
                  format: uri
                  description: URL to certificate file
                status:
                  type: string
                  description: Certification status
      responses:
        '200':
          description: Certification updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  certificationName:
                    type: string
                  issuer:
                    type: string
                  issuedDate:
                    type: string
                    format: date-time
                  expiryDate:
                    type: string
                    format: date-time
                  certificateUrl:
                    type: string
                  status:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Certifications
      summary: Delete certification
      description: Delete a certification (owner or admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Certification ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Certification deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Certification deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/certifications/verify/{code}':
    get:
      tags:
        - Certifications
      summary: Verify certification by code
      description: Verify a certification using its verification code (public endpoint)
      parameters:
        - name: code
          in: path
          required: true
          description: Verification code
          schema:
            type: string
      responses:
        '200':
          description: Verification result
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    description: Whether the certification is valid
                  message:
                    type: string
                    description: Verification message
                  certification:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      userName:
                        type: string
                      certificationName:
                        type: string
                      issuer:
                        type: string
                      issuedDate:
                        type: string
                        format: date-time
                      expiryDate:
                        type: string
                        format: date-time
                      status:
                        type: string
                      courseTitle:
                        type: string
                      classTitle:
                        type: string
                      isExpired:
                        type: boolean
  /certifications/my:
    get:
      tags:
        - Certifications
      summary: Get user's earned certificates
      description: Retrieve all certifications earned by the authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User certifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  certifications:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                          description: Certification name
                        issuer:
                          type: string
                        dateEarned:
                          type: string
                          format: date-time
                        validUntil:
                          type: string
                          format: date-time
                        credentialId:
                          type: string
                          description: Verification code
                        skills:
                          type: string
                          nullable: true
                        certificateUrl:
                          type: string
                        course:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                        class:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/certifications/{id}/download':
    get:
      tags:
        - Certifications
      summary: Download certificate file or return signed URL
      description: Get a download link or signed URL for a specific certificate
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Certification ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Certificate download information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: Certificate URL
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /certifications/progress:
    get:
      tags:
        - Certifications
      summary: Get in-progress programs with progress fields
      description: Retrieve all certification programs the user is currently enrolled in with progress details
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Certification progress retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  programs:
                    type: array
                    items:
                      type: object
                      properties:
                        programId:
                          type: string
                          format: uuid
                        title:
                          type: string
                          description: Program title
                        level:
                          type: string
                        duration:
                          type: string
                        progress:
                          type: integer
                          minimum: 0
                          maximum: 100
                          description: Overall progress percentage
                        nextRequirement:
                          type: string
                          nullable: true
                          description: Next requirement to complete
                        estimatedCompletion:
                          type: string
                          format: date-time
                          nullable: true
                          description: Estimated completion date
                        totals:
                          type: object
                          properties:
                            totalModules:
                              type: integer
                              description: Total number of modules
                            completedModules:
                              type: integer
                              description: Number of completed modules
        '401':
          $ref: '#/components/responses/Unauthorized'
  /certification-programs:
    get:
      tags:
        - Certification Programs
      summary: List available certification programs with modules and pricing
      description: Retrieve all available certification programs with their modules and pricing information
      responses:
        '200':
          description: Certification programs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  programs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        description:
                          type: string
                        duration:
                          type: string
                        level:
                          type: string
                        prerequisites:
                          type: string
                        price:
                          type: number
                        is_active:
                          type: boolean
                        created_at:
                          type: string
                          format: date-time
                        modules:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                                format: uuid
                              title:
                                type: string
                              orderIndex:
                                type: integer
        '500':
          description: Internal server error
  '/certification-programs/{id}/enroll':
    post:
      tags:
        - Certification Programs
      summary: Enroll in a certification track
      description: Enroll the authenticated user in a specific certification program
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Certification program ID
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Successfully enrolled in certification program
          content:
            application/json:
              schema:
                type: object
                properties:
                  enrollment:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      programId:
                        type: string
                        format: uuid
                      status:
                        type: string
                        example: in_progress
                      progress:
                        type: integer
                        description: Progress percentage (0-100)
                        example: 0
                      enrolledAt:
                        type: string
                        format: date-time
        '400':
          description: Bad request - User already enrolled
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: ALREADY_ENROLLED
                  message:
                    type: string
                    example: Already enrolled in this program
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Certification program not found or inactive
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Program Not Found
                  message:
                    type: string
                    example: Certification program not found or inactive
  '/lessons/{id}':
    get:
      tags:
        - Lessons
      summary: Get details of a lesson by its ID
      description: Retrieve detailed information about a specific lesson
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Lesson ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lesson details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  courseId:
                    type: string
                    format: uuid
                  courseTitle:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                    nullable: true
                  content:
                    type: string
                    nullable: true
                  videoUrl:
                    type: string
                    nullable: true
                  durationMinutes:
                    type: integer
                  orderIndex:
                    type: integer
                  isPublished:
                    type: boolean
                  isUnlocked:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
                  progress:
                    type: object
                    nullable: true
                    properties:
                      isCompleted:
                        type: boolean
                      progressPercentage:
                        type: integer
                        minimum: 0
                        maximum: 100
                      timeSpentMinutes:
                        type: integer
                        minimum: 0
                      completedAt:
                        type: string
                        format: date-time
                        nullable: true
                  test:
                    type: object
                    nullable: true
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                      description:
                        type: string
                        nullable: true
                      durationMinutes:
                        type: integer
                      passingScore:
                        type: integer
                      maxAttempts:
                        type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: |
            Access denied. Common causes:
            - Enrollment required to access lessons
            - Lesson is locked (complete previous lesson's test first)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - ENROLLMENT_REQUIRED
                      - Lesson Locked
                  message:
                    type: string
                    example: Complete the test for 'Previous Lesson' to unlock this lesson
                  details:
                    type: object
                    properties:
                      courseId:
                        type: string
                        format: uuid
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Lessons
      summary: Update a lesson by its ID
      description: Update an existing lesson (requires authentication and owner/admin authorization)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Lesson ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  description: Updated lesson title
                description:
                  type: string
                  description: Updated lesson description
                content:
                  type: string
                  description: Updated lesson content
                videoUrl:
                  type: string
                  format: uri
                  description: Updated video URL
                durationMinutes:
                  type: integer
                  minimum: 0
                  description: Updated duration in minutes
                orderIndex:
                  type: integer
                  minimum: 0
                  description: Updated order index
                isPublished:
                  type: boolean
                  description: Whether the lesson is published
      responses:
        '200':
          description: Lesson updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  description:
                    type: string
                    nullable: true
                  content:
                    type: string
                    nullable: true
                  videoUrl:
                    type: string
                    nullable: true
                  durationMinutes:
                    type: integer
                  orderIndex:
                    type: integer
                  isPublished:
                    type: boolean
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Lessons
      summary: Delete a lesson by its ID
      description: Delete a lesson (requires authentication and owner/admin authorization)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Lesson ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lesson deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lesson deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/lessons/{id}/complete':
    post:
      tags:
        - Lessons
      summary: Mark a lesson as completed for the authenticated user
      description: 'Mark a lesson as completed, automatically updating course progress'
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Lesson ID
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                timeSpentMinutes:
                  type: integer
                  minimum: 0
                  default: 0
                  description: Time spent on the lesson in minutes
      responses:
        '200':
          description: Lesson marked as completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lesson marked as completed
                  lessonId:
                    type: string
                    format: uuid
                  completedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/lessons/{id}/progress':
    get:
      tags:
        - Lessons
      summary: Get the current progress for a lesson for the authenticated user
      description: Retrieve progress information for a specific lesson
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Lesson ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lesson progress retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  lessonId:
                    type: string
                    format: uuid
                  isCompleted:
                    type: boolean
                    description: Whether the lesson is completed
                  progressPercentage:
                    type: integer
                    minimum: 0
                    maximum: 100
                    description: Progress percentage
                  timeSpentMinutes:
                    type: integer
                    minimum: 0
                    description: Time spent on the lesson
                  completedAt:
                    type: string
                    format: date-time
                    nullable: true
                    description: When the lesson was completed
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/lessons/{id}/workshop':
    get:
      tags:
        - Lessons
      summary: Get the enabled workshop spec for a lesson
      description: Returns the exercise-based workshop spec if enabled for the lesson. Returns null if no workshop or disabled.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Lesson ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Workshop spec fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  lesson:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                  workshop:
                    oneOf:
                      - type: 'null'
                      - type: object
                        properties:
                          spec:
                            $ref: '#/paths/~1admin~1lessons~1%7BlessonId%7D~1workshop/put/requestBody/content/application~1json/schema/properties/spec'
                          updatedAt:
                            type: string
                            format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/admin/lessons/{lessonId}/workshop':
    get:
      tags:
        - Lessons
      summary: Get a lesson's workshop spec (admin)
      security:
        - BearerAuth: []
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Workshop returned or null
          content:
            application/json:
              schema:
                type: object
                properties:
                  lesson:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                  workshop:
                    oneOf:
                      - type: 'null'
                      - type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          lessonId:
                            type: string
                            format: uuid
                          isEnabled:
                            type: boolean
                          spec:
                            $ref: '#/paths/~1admin~1lessons~1%7BlessonId%7D~1workshop/put/requestBody/content/application~1json/schema/properties/spec'
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Lessons
      summary: Create or replace a lesson's workshop spec (admin)
      security:
        - BearerAuth: []
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isEnabled:
                  type: boolean
                  default: false
                spec:
                  $ref: '#/paths/~1admin~1lessons~1%7BlessonId%7D~1workshop/put/requestBody/content/application~1json/schema/properties/spec'
      responses:
        '201':
          description: Workshop upserted
          content:
            application/json:
              schema:
                type: object
                properties:
                  workshop:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      lessonId:
                        type: string
                        format: uuid
                      isEnabled:
                        type: boolean
                      spec:
                        $ref: '#/paths/~1admin~1lessons~1%7BlessonId%7D~1workshop/put/requestBody/content/application~1json/schema/properties/spec'
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Lessons
      summary: Update a lesson's workshop spec (admin)
      security:
        - BearerAuth: []
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isEnabled:
                  type: boolean
                spec:
                  type: object
                  description: Structured step-based workshop exercise for a lesson
                  required:
                    - id
                    - lessonId
                    - isEnabled
                    - title
                    - steps
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Unique identifier for the workshop exercise
                    lessonId:
                      type: string
                      format: uuid
                      description: ID of the lesson this workshop belongs to
                    isEnabled:
                      type: boolean
                      description: Whether the workshop is enabled for students
                    title:
                      type: string
                      description: Title of the workshop exercise
                    introduction:
                      type: string
                      description: Introduction text shown before the workshop starts
                    steps:
                      type: array
                      description: Sequential steps for the workshop exercise
                      items:
                        type: object
                        required:
                          - instructions
                          - expected_commands
                          - success_response
                        properties:
                          instructions:
                            type: array
                            items:
                              type: string
                            description: List of instruction prompts for this step
                          expected_commands:
                            type: array
                            items:
                              type: string
                            description: Array of acceptable command variations for this step
                          success_response:
                            type: string
                            description: Expected output when the command succeeds
                          failure_response:
                            type: string
                            description: Error message with hint when the command fails
                          success:
                            type: boolean
                            description: Whether this step has been completed successfully
                    end_message:
                      type: string
                      description: Completion message shown when all steps are finished
                    settings:
                      type: object
                      description: Workshop settings
                      properties:
                        allowRetry:
                          type: boolean
                          description: Whether retries are allowed
                        maxRetries:
                          type: integer
                          description: Maximum number of retries
                        autoAdvance:
                          type: boolean
                          description: Whether to auto-advance to next exercise
                        allowHintUsage:
                          type: boolean
                          description: Whether hints can be used
                        showExpectedOutput:
                          type: boolean
                          description: Whether to show expected output
                    resources:
                      type: array
                      description: Additional resources for the workshop
                      items:
                        type: object
                        required:
                          - url
                          - type
                          - title
                        properties:
                          url:
                            type: string
                            format: uri
                            description: URL of the resource
                          type:
                            type: string
                            enum:
                              - documentation
                              - video
                              - tutorial
                            description: Type of resource
                          title:
                            type: string
                            description: Title of the resource
      responses:
        '200':
          description: Workshop updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  workshop:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      lessonId:
                        type: string
                        format: uuid
                      isEnabled:
                        type: boolean
                      spec:
                        $ref: '#/paths/~1admin~1lessons~1%7BlessonId%7D~1workshop/put/requestBody/content/application~1json/schema/properties/spec'
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Lessons
      summary: Delete a lesson's workshop spec (admin)
      security:
        - BearerAuth: []
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Workshop deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/lessons/admin/courses/{courseId}/lessons':
    get:
      tags:
        - Lessons
      summary: Get all lessons for a course (admin only)
      description: Retrieve all lessons for a specific course with admin access
      security:
        - BearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course lessons retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  courseId:
                    type: string
                    format: uuid
                  lessons:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        description:
                          type: string
                          nullable: true
                        orderIndex:
                          type: integer
                        isPublished:
                          type: boolean
                        createdAt:
                          type: string
                          format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - Lessons
      summary: Create a new lesson for a course (admin only)
      description: Create a new lesson in a specific course
      security:
        - BearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - durationMinutes
                - orderIndex
              properties:
                title:
                  type: string
                  minLength: 1
                  description: Lesson title
                description:
                  type: string
                  description: Lesson description
                content:
                  type: string
                  description: Lesson content
                videoUrl:
                  type: string
                  format: uri
                  description: Video URL
                durationMinutes:
                  type: integer
                  minimum: 0
                  description: Duration in minutes
                orderIndex:
                  type: integer
                  minimum: 0
                  description: Order index
                isPublished:
                  type: boolean
                  default: false
                  description: Whether the lesson is published
      responses:
        '201':
          description: Lesson created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  description:
                    type: string
                    nullable: true
                  content:
                    type: string
                    nullable: true
                  videoUrl:
                    type: string
                    nullable: true
                  durationMinutes:
                    type: integer
                  orderIndex:
                    type: integer
                  isPublished:
                    type: boolean
                  courseId:
                    type: string
                    format: uuid
                  createdAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/lessons/courses/{id}/lessons':
    get:
      tags:
        - Lessons
      summary: Get all lessons for a course
      description: Retrieve all lessons for a specific course (for enrolled users)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course lessons retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  courseId:
                    type: string
                    format: uuid
                  lessons:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        description:
                          type: string
                          nullable: true
                        orderIndex:
                          type: integer
                        isPublished:
                          type: boolean
                        isUnlocked:
                          type: boolean
                        isCompleted:
                          type: boolean
                        progressPercentage:
                          type: integer
                          minimum: 0
                          maximum: 100
                        test:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                            passingScore:
                              type: integer
                            maxAttempts:
                              type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Enrollment required to view course lessons
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: ENROLLMENT_REQUIRED
                  message:
                    type: string
                    example: Enrollment required to view course lessons
        '404':
          $ref: '#/components/responses/NotFound'
  /courses/browse:
    get:
      tags:
        - Courses
      summary: Browse courses with filters and pagination
      description: Public endpoint to browse and search for courses with various filters
      parameters:
        - name: topic
          in: query
          description: Filter by course topic
          schema:
            type: string
        - name: instructor
          in: query
          description: Filter by instructor name (partial match)
          schema:
            type: string
        - name: level
          in: query
          description: Filter by course level
          schema:
            type: string
            enum:
              - beginner
              - intermediate
              - advanced
        - name: price_min
          in: query
          description: Minimum price filter
          schema:
            type: number
            minimum: 0
        - name: price_max
          in: query
          description: Maximum price filter
          schema:
            type: number
            minimum: 0
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum:
              - created_at
              - title
              - price
              - rating
              - student_count
            default: created_at
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 12
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: Courses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  courses:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        description:
                          type: string
                        topic:
                          type: string
                        type:
                          type: string
                        price:
                          type: number
                        imageUrl:
                          type: string
                        duration:
                          type: integer
                        rating:
                          type: number
                        studentCount:
                          type: integer
                        difficulty:
                          type: string
                        objectives:
                          type: array
                          items:
                            type: string
                        prerequisites:
                          type: array
                          items:
                            type: string
                        syllabus:
                          type: array
                          items:
                            type: string
                        tags:
                          type: array
                          items:
                            type: string
                        lessonCount:
                          type: integer
                        createdAt:
                          type: string
                          format: date-time
                        instructor:
                          $ref: '#/components/schemas/CourseInstructor'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
  /courses:
    get:
      tags:
        - Courses
      summary: Get courses with filters and pagination
      description: Retrieve a list of courses with optional filtering and pagination
      parameters:
        - name: topic
          in: query
          description: Filter by course topic
          schema:
            type: string
        - name: type
          in: query
          description: Filter by course type
          schema:
            type: string
            enum:
              - online
              - offline
        - name: instructorId
          in: query
          description: Filter by instructor ID
          schema:
            type: string
            format: uuid
        - name: isPublished
          in: query
          description: Filter by publication status
          schema:
            type: boolean
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Courses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  courses:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        description:
                          type: string
                        topic:
                          type: string
                        type:
                          type: string
                        certification:
                          type: string
                        price:
                          type: number
                        rating:
                          type: number
                        studentCount:
                          type: integer
                        duration:
                          type: integer
                        difficulty:
                          type: string
                        objectives:
                          type: string
                        prerequisites:
                          type: string
                        syllabus:
                          type: string
                        tags:
                          type: array
                          items:
                            type: string
                        instructorId:
                          type: string
                          format: uuid
                        instructorName:
                          type: string
                          nullable: true
                        imageUrl:
                          type: string
                        isPublished:
                          type: boolean
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
    post:
      tags:
        - Courses
      summary: Create a new course
      description: Create a new course (instructor access only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - topic
                - type
                - price
                - duration
              properties:
                title:
                  type: string
                  minLength: 1
                  description: Course title
                description:
                  type: string
                  minLength: 10
                  description: Course description
                topic:
                  type: string
                  minLength: 1
                  description: Course topic/category
                type:
                  type: string
                  enum:
                    - online
                    - offline
                  description: Course type
                price:
                  type: number
                  minimum: 0
                  description: Course price
                duration:
                  type: string
                  minLength: 1
                  description: Course duration
                certification:
                  type: string
                  description: Course certification
                difficulty:
                  type: string
                  enum:
                    - beginner
                    - intermediate
                    - advanced
                  description: Course difficulty level
                objectives:
                  type: string
                  description: Learning objectives
                prerequisites:
                  type: string
                  description: Prerequisites for the course
                syllabus:
                  type: string
                  description: Course syllabus
                tags:
                  type: array
                  items:
                    type: string
                  description: Course tags
                imageUrl:
                  type: string
                  format: uri
                  description: Course image URL
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  description:
                    type: string
                  topic:
                    type: string
                  type:
                    type: string
                  certification:
                    type: string
                  price:
                    type: number
                  duration:
                    type: string
                  difficulty:
                    type: string
                  objectives:
                    type: string
                  prerequisites:
                    type: string
                  syllabus:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  instructorId:
                    type: string
                    format: uuid
                  imageUrl:
                    type: string
                  isPublished:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/courses/{id}':
    get:
      tags:
        - Courses
      summary: Get details of a course by its ID
      description: Retrieve detailed information about a specific course
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  description:
                    type: string
                  topic:
                    type: string
                  type:
                    type: string
                  certification:
                    type: string
                  price:
                    type: number
                  rating:
                    type: number
                  studentCount:
                    type: integer
                  duration:
                    type: string
                  difficulty:
                    type: string
                  objectives:
                    type: string
                  prerequisites:
                    type: string
                  syllabus:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  instructorId:
                    type: string
                    format: uuid
                  instructorName:
                    type: string
                    nullable: true
                  instructorAvatar:
                    type: string
                  instructorBio:
                    type: string
                  imageUrl:
                    type: string
                  isPublished:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
                  enrollment:
                    type: object
                    nullable: true
                    properties:
                      id:
                        type: string
                        format: uuid
                      progress:
                        type: integer
                      status:
                        type: string
                      enrolledAt:
                        type: string
                        format: date-time
                      completedAt:
                        type: string
                        format: date-time
                  courseStats:
                    type: object
                    nullable: true
                    properties:
                      totalLessons:
                        type: integer
                      completedLessons:
                        type: integer
                      totalTests:
                        type: integer
                      passedTests:
                        type: integer
                      totalProgress:
                        type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Courses
      summary: Update a course by its ID
      description: Update an existing course (requires authentication and owner/admin authorization)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  description: Updated course title
                description:
                  type: string
                  minLength: 10
                  description: Updated course description
                topic:
                  type: string
                  minLength: 1
                  description: Updated course topic
                type:
                  type: string
                  enum:
                    - online
                    - offline
                  description: Updated course type
                certification:
                  type: string
                  description: Updated course certification
                price:
                  type: number
                  minimum: 0
                  description: Updated course price
                duration:
                  type: string
                  minLength: 1
                  description: Updated course duration
                difficulty:
                  type: string
                  enum:
                    - beginner
                    - intermediate
                    - advanced
                  description: Updated course level
                objectives:
                  type: string
                  description: Updated learning objectives
                prerequisites:
                  type: string
                  description: Updated prerequisites
                syllabus:
                  type: string
                  description: Updated course syllabus
                tags:
                  type: array
                  items:
                    type: string
                  description: Updated course tags
                imageUrl:
                  type: string
                  format: uri
                  description: Updated course image URL
                isPublished:
                  type: boolean
                  description: Whether the course is published
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  description:
                    type: string
                  topic:
                    type: string
                  type:
                    type: string
                  certification:
                    type: string
                  price:
                    type: number
                  duration:
                    type: string
                  difficulty:
                    type: string
                  objectives:
                    type: string
                  prerequisites:
                    type: string
                  syllabus:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  imageUrl:
                    type: string
                  isPublished:
                    type: boolean
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Courses
      summary: Delete a course by its ID
      description: Delete a course (requires authentication and owner/admin authorization)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Course deleted successfully
        '400':
          description: Cannot delete course with enrollments
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Course Has Enrollments
                  message:
                    type: string
                    example: Cannot delete course that has enrollments
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/courses/{id}/tests':
    get:
      tags:
        - Courses
      summary: Get all tests for a course
      description: Retrieve all tests associated with a specific course
      responses:
        '200':
          description: Course tests retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tests:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        description:
                          type: string
                        durationMinutes:
                          type: integer
                        passingScore:
                          type: integer
                        maxAttempts:
                          type: integer
                        orderIndex:
                          type: integer
                        isPublished:
                          type: boolean
                        createdAt:
                          type: string
                          format: date-time
        '404':
          $ref: '#/components/responses/NotFound'
  '/courses/{id}/enrollments':
    get:
      tags:
        - Courses
      summary: Get all enrollments for a course
      description: Retrieve all enrollments for a specific course (admin/instructor access only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course enrollments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  enrollments:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        userId:
                          type: string
                          format: uuid
                        userName:
                          type: string
                        userEmail:
                          type: string
                        userAvatar:
                          type: string
                        progress:
                          type: integer
                        status:
                          type: string
                        sponsorshipId:
                          type: string
                          format: uuid
                          nullable: true
                        enrolledAt:
                          type: string
                          format: date-time
                        completedAt:
                          type: string
                          format: date-time
                          nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/courses/{id}/enroll':
    post:
      tags:
        - Courses
      summary: Enroll in a course
      description: |
        Enroll in a course with optional sponsorship code for discounted enrollment.

        **Sponsorship Code Flow:**
        1. **Validate Code First**: Use `GET /api/sponsorships/code/{discountCode}` to validate the sponsorship code
        2. **Get Sponsorship ID**: From the validation response, extract the `sponsorship.id` field
        3. **Enroll with ID**: Use that `sponsorship.id` as the `sponsorshipId` in this enrollment request

        **Important Notes:**
        - The `sponsorshipId` must be the UUID from a valid, active sponsorship
        - The sponsorship must be for the specific course you're enrolling in
        - The sponsorship must have available spots (`remainingSpots > 0`)
        - The sponsorship must not be expired (`isExpired = false`)

        **Example Flow:**
        1. User enters discount code "SPONSOR123"
        2. Frontend calls: `GET /api/sponsorships/code/SPONSOR123`
        3. Response includes: `sponsorship.id = "uuid-here"`
        4. Frontend calls: `POST /api/{courseId}/enroll` with `sponsorshipId: "uuid-here"`
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sponsorshipId:
                  type: string
                  format: uuid
                  description: |
                    Sponsorship ID (UUID) obtained from validating a sponsorship code.

                    **How to get this ID:**
                    1. Call `GET /api/sponsorships/code/{discountCode}` first
                    2. Extract `sponsorship.id` from the response
                    3. Use that UUID here

                    **Do NOT send the discount code directly** - you must validate it first to get the ID.
      responses:
        '201':
          description: Successfully enrolled in course
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  userId:
                    type: string
                    format: uuid
                  courseId:
                    type: string
                    format: uuid
                  enrollmentType:
                    type: string
                    example: course
                  progress:
                    type: integer
                    example: 0
                  status:
                    type: string
                    example: enrolled
                  sponsorshipId:
                    type: string
                    format: uuid
                    nullable: true
                  enrolledAt:
                    type: string
                    format: date-time
        '400':
          description: |
            Bad request. Common causes:
            - Invalid or inactive sponsorship ID
            - Sponsorship is expired or full
            - Sponsorship is not for this course
            - User is already enrolled in this course
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - Invalid Sponsorship
                      - Already Enrolled
                      - Sponsorship Full
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/courses/{id}/enrollments/{enrollmentId}':
    put:
      tags:
        - Courses
      summary: Update the progress of a course enrollment
      description: Update progress for a course enrollment (manual updates and automatic progress tracking)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
        - name: enrollmentId
          in: path
          required: true
          description: Enrollment ID
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                progress:
                  type: integer
                  minimum: 0
                  maximum: 100
                  description: Progress percentage
                status:
                  type: string
                  enum:
                    - pending
                    - in_progress
                    - completed
                    - dropped
                  description: Enrollment status
      responses:
        '200':
          description: Course enrollment progress updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  progress:
                    type: integer
                    minimum: 0
                    maximum: 100
                  status:
                    type: string
                  completedAt:
                    type: string
                    format: date-time
                    nullable: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/courses/{id}/lessons':
    get:
      tags:
        - Courses
      summary: Get all lessons for a course with their unlock and completion status
      description: Retrieve all lessons for a course with unlock status based on test completion
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course lessons with unlock status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  lessons:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        description:
                          type: string
                        orderIndex:
                          type: integer
                        durationMinutes:
                          type: integer
                        isUnlocked:
                          type: boolean
                          description: Whether the lesson is unlocked
                        isCompleted:
                          type: boolean
                          description: Whether the lesson is completed
                        testPassed:
                          type: boolean
                          description: Whether the test was passed
                        progress:
                          type: integer
                          minimum: 0
                          maximum: 100
                        timeSpentMinutes:
                          type: integer
                          minimum: 0
                        completedAt:
                          type: string
                          format: date-time
                          nullable: true
                        test:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                            passingScore:
                              type: integer
                            maxAttempts:
                              type: integer
                  unlockedCount:
                    type: integer
                    description: Number of unlocked lessons
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Enrollment required to view lessons
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: ENROLLMENT_REQUIRED
                  message:
                    type: string
                    example: Enrollment required to view lessons
                  details:
                    type: object
                    properties:
                      courseId:
                        type: string
                        format: uuid
        '404':
          $ref: '#/components/responses/NotFound'
  '/courses/{id}/progression':
    get:
      tags:
        - Courses
      summary: Get detailed progression status for a course
      description: Retrieve detailed progression showing which lessons are locked/unlocked and overall progress
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course progression status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  courseId:
                    type: string
                    format: uuid
                  progression:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        orderIndex:
                          type: integer
                        isUnlocked:
                          type: boolean
                        isCompleted:
                          type: boolean
                        testPassed:
                          type: boolean
                        progress:
                          type: integer
                          minimum: 0
                          maximum: 100
                        timeSpentMinutes:
                          type: integer
                          minimum: 0
                        completedAt:
                          type: string
                          format: date-time
                          nullable: true
                        test:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                            passingScore:
                              type: integer
                            maxAttempts:
                              type: integer
                        nextUnlocked:
                          type: boolean
                  courseStats:
                    type: object
                    properties:
                      totalLessons:
                        type: integer
                      unlockedLessons:
                        type: integer
                      completedLessons:
                        type: integer
                      passedTests:
                        type: integer
                      totalProgress:
                        type: integer
                        minimum: 0
                        maximum: 100
                  currentLesson:
                    type: object
                    nullable: true
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                  nextUnlockedLesson:
                    type: object
                    nullable: true
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Not enrolled in course
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Not Enrolled
                  message:
                    type: string
                    example: You must be enrolled in this course to view progression
        '404':
          $ref: '#/components/responses/NotFound'
  '/courses/{id}/test-stats':
    get:
      tags:
        - Courses
      summary: Get test statistics for a course
      description: Retrieve comprehensive test statistics for a specific course
      responses:
        '200':
          description: Course test statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  courseId:
                    type: string
                    format: uuid
                  courseStats:
                    type: object
                    properties:
                      totalLessons:
                        type: integer
                      unlockedLessons:
                        type: integer
                      completedLessons:
                        type: integer
                      passedTests:
                        type: integer
                      totalProgress:
                        type: integer
  '/courses/{id}/analytics':
    get:
      tags:
        - Courses
      summary: Get comprehensive analytics for all tests in a course
      description: Retrieve analytics for both course-level and lesson-level tests
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course analytics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalTests:
                    type: integer
                    description: Total number of tests in the course
                  totalAttempts:
                    type: integer
                    description: Total number of test attempts
                  averageScore:
                    type: number
                    description: Average score across all tests
                  passRate:
                    type: number
                    description: Overall pass rate percentage
                  averageTimeMinutes:
                    type: number
                    description: Average time taken for tests
                  questionAnalytics:
                    type: array
                    items:
                      type: object
                      properties:
                        questionId:
                          type: string
                          format: uuid
                        question:
                          type: string
                        questionType:
                          type: string
                          enum:
                            - multiple_choice
                            - true_false
                            - short_answer
                        points:
                          type: integer
                        totalAnswers:
                          type: integer
                        correctAnswers:
                          type: integer
                        correctRate:
                          type: number
                          description: Percentage of correct answers
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/courses/{id}/discussions':
    get:
      tags:
        - Courses
      summary: Get all discussions for a specific course
      description: Retrieve all discussions related to a specific course
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: string
            format: uuid
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
            enum:
              - general
              - course
              - lesson
              - class
              - question
              - help
              - feedback
        - name: lessonId
          in: query
          description: Filter by specific lesson
          schema:
            type: string
            format: uuid
        - name: search
          in: query
          description: Search in title and content
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum:
              - created_at
              - title
              - last_activity_at
              - reply_count
              - likes_count
            default: last_activity_at
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Course discussions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  course:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                      topic:
                        type: string
                  discussions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        content:
                          type: string
                        category:
                          type: string
                        lessonId:
                          type: string
                          format: uuid
                          nullable: true
                        lessonTitle:
                          type: string
                          nullable: true
                        authorName:
                          type: string
                        replyCount:
                          type: integer
                        likesCount:
                          type: integer
                        lastActivityAt:
                          type: string
                          format: date-time
                        createdAt:
                          type: string
                          format: date-time
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '404':
          $ref: '#/components/responses/NotFound'
  /classes/upcoming:
    get:
      tags:
        - Classes
      summary: Get upcoming classes with filters and pagination
      description: Retrieve a list of upcoming classes (public endpoint)
      parameters:
        - name: topic
          in: query
          description: Filter by topic
          schema:
            type: string
        - name: instructor
          in: query
          description: Filter by instructor name
          schema:
            type: string
        - name: type
          in: query
          description: Filter by type
          schema:
            type: string
            enum:
              - online
              - hybrid
        - name: start_date
          in: query
          description: Filter by start date
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: Filter by end date
          schema:
            type: string
            format: date
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum:
              - start_date
              - title
              - price
              - available_slots
            default: start_date
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 12
            minimum: 1
      responses:
        '200':
          description: Upcoming classes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        description:
                          type: string
                        topic:
                          type: string
                        type:
                          type: string
                        price:
                          type: number
                        startDate:
                          type: string
                          format: date-time
                        endDate:
                          type: string
                          format: date-time
                        duration:
                          type: string
                        location:
                          type: string
                        availableSlots:
                          type: integer
                        totalSlots:
                          type: integer
                        createdAt:
                          type: string
                          format: date-time
                        instructor:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            firstName:
                              type: string
                            lastName:
                              type: string
                            avatarUrl:
                              type: string
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
  /classes/topics:
    get:
      tags:
        - Classes
      summary: Get distinct topics for filters
      description: Retrieve all distinct topics available for class filtering (public endpoint)
      responses:
        '200':
          description: Class topics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  topics:
                    type: array
                    items:
                      type: string
                      description: Topic name
  /classes:
    get:
      tags:
        - Classes
      summary: List classes with filters and pagination
      description: Retrieve a list of classes with optional filtering and sorting
      parameters:
        - name: topic
          in: query
          description: Filter by topic
          schema:
            type: string
        - name: type
          in: query
          description: Filter by type
          schema:
            type: string
            enum:
              - online
              - hybrid
        - name: instructorId
          in: query
          description: Filter by instructor ID
          schema:
            type: string
            format: uuid
        - name: priceMin
          in: query
          description: Minimum price filter
          schema:
            type: number
            minimum: 0
        - name: priceMax
          in: query
          description: Maximum price filter
          schema:
            type: number
            minimum: 0
        - name: isPublished
          in: query
          description: Filter by publication status
          schema:
            type: boolean
        - name: search
          in: query
          description: Search in title and description
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum:
              - start_date
              - title
              - price
              - available_slots
              - created_at
            default: start_date
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of classes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  classes:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        description:
                          type: string
                        topic:
                          type: string
                        type:
                          type: string
                        startDate:
                          type: string
                          format: date-time
                        endDate:
                          type: string
                          format: date-time
                        duration:
                          type: string
                        price:
                          type: number
                        instructorId:
                          type: string
                          format: uuid
                        instructorName:
                          type: string
                        availableSlots:
                          type: integer
                        totalSlots:
                          type: integer
                        location:
                          type: string
                        isPublished:
                          type: boolean
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
    post:
      tags:
        - Classes
      summary: Create new class
      description: Create a new class (instructor only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - topic
                - type
                - startDate
                - duration
                - price
                - availableSlots
                - totalSlots
              properties:
                title:
                  type: string
                  minLength: 1
                  description: Class title
                description:
                  type: string
                  minLength: 10
                  description: Class description
                topic:
                  type: string
                  minLength: 1
                  description: Class topic
                type:
                  type: string
                  enum:
                    - online
                    - hybrid
                  description: Class type
                startDate:
                  type: string
                  format: date-time
                  description: Class start date
                endDate:
                  type: string
                  format: date-time
                  description: Optional end date
                duration:
                  type: string
                  minLength: 1
                  description: Class duration
                price:
                  type: number
                  minimum: 0
                  description: Class price
                availableSlots:
                  type: integer
                  minimum: 1
                  description: Available slots
                totalSlots:
                  type: integer
                  minimum: 1
                  description: Total slots
                location:
                  type: string
                  description: Class location
      responses:
        '201':
          description: Class created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  description:
                    type: string
                  topic:
                    type: string
                  type:
                    type: string
                  startDate:
                    type: string
                    format: date-time
                  endDate:
                    type: string
                    format: date-time
                  duration:
                    type: string
                  price:
                    type: number
                  instructorId:
                    type: string
                    format: uuid
                  availableSlots:
                    type: integer
                  totalSlots:
                    type: integer
                  location:
                    type: string
                  isPublished:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/classes/{id}':
    get:
      tags:
        - Classes
      summary: 'Get class details including schedule, duration, location, instructor, availableSlots/totalSlots, courses'
      description: Retrieve detailed information about a specific class
      parameters:
        - name: id
          in: path
          required: true
          description: Class ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Class details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  description:
                    type: string
                  topic:
                    type: string
                  type:
                    type: string
                  startDate:
                    type: string
                    format: date-time
                  endDate:
                    type: string
                    format: date-time
                  duration:
                    type: string
                  price:
                    type: number
                  instructorId:
                    type: string
                    format: uuid
                  instructorName:
                    type: string
                  instructorAvatar:
                    type: string
                  instructorBio:
                    type: string
                  availableSlots:
                    type: integer
                  totalSlots:
                    type: integer
                  location:
                    type: string
                  isPublished:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
                  courses:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        topic:
                          type: string
                        duration:
                          type: string
                        orderIndex:
                          type: integer
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Classes
      summary: Update class
      description: Update an existing class (owner or admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Class ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  description: Class title
                description:
                  type: string
                  minLength: 10
                  description: Class description
                topic:
                  type: string
                  minLength: 1
                  description: Class topic
                type:
                  type: string
                  enum:
                    - online
                    - hybrid
                  description: Class type
                startDate:
                  type: string
                  format: date-time
                  description: Class start date
                endDate:
                  type: string
                  format: date-time
                  description: Optional end date
                duration:
                  type: string
                  minLength: 1
                  description: Class duration
                price:
                  type: number
                  minimum: 0
                  description: Class price
                availableSlots:
                  type: integer
                  minimum: 1
                  description: Available slots
                totalSlots:
                  type: integer
                  minimum: 1
                  description: Total slots
                location:
                  type: string
                  description: Class location
                isPublished:
                  type: boolean
                  description: Publication status
      responses:
        '200':
          description: Class updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  description:
                    type: string
                  topic:
                    type: string
                  type:
                    type: string
                  startDate:
                    type: string
                    format: date-time
                  endDate:
                    type: string
                    format: date-time
                  duration:
                    type: string
                  price:
                    type: number
                  availableSlots:
                    type: integer
                  totalSlots:
                    type: integer
                  location:
                    type: string
                  isPublished:
                    type: boolean
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Classes
      summary: Delete class
      description: Delete a class (owner or admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Class ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Class deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Class deleted successfully
        '400':
          description: Cannot delete class with enrollments
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Class Has Enrollments
                  message:
                    type: string
                    example: Cannot delete class that has enrollments
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /uploads:
    post:
      tags:
        - File Uploads
      summary: Upload Screenshots/Images
      description: |
        Upload general images and screenshots.

        **Supported formats**: JPEG, JPG, PNG, GIF, WebP
        **Maximum file size**: 5MB
        **Storage**: Files stored with unique UUID-based names to prevent conflicts
        **Access**: Files accessible via `/uploads/screenshots/filename` URL path
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to upload
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: File uploaded successfully
                  data:
                    type: object
                    properties:
                      filename:
                        type: string
                        description: Unique generated filename
                      originalName:
                        type: string
                        description: Original filename from user
                      size:
                        type: integer
                        description: File size in bytes
                      mimetype:
                        type: string
                        description: MIME type of the file
                      url:
                        type: string
                        format: uri
                        description: Public URL to access the file
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /uploads/course-image:
    post:
      tags:
        - File Uploads
      summary: Upload Course Image
      description: Upload an image for a course
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Course image file
      responses:
        '200':
          description: Course image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Course image uploaded successfully
                  data:
                    type: object
                    properties:
                      filename:
                        type: string
                        description: Unique generated filename
                      originalName:
                        type: string
                        description: Original filename from user
                      size:
                        type: integer
                        description: File size in bytes
                      mimetype:
                        type: string
                        description: MIME type of the file
                      imageUrl:
                        type: string
                        format: uri
                        description: Public URL to access the course image
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /uploads/lesson-material:
    post:
      tags:
        - File Uploads
      summary: Upload Lesson Material
      description: |
        Upload a material file for a lesson.

        **Supported formats**: 
        - Images: JPEG, JPG, PNG, GIF, WebP
        - Documents: PDF, DOC, DOCX, TXT
        - Videos: MP4, WebM, OGG
        **Maximum file size**: 10MB
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Lesson material file
      responses:
        '200':
          description: Lesson material uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Lesson material uploaded successfully
                  data:
                    type: object
                    properties:
                      filename:
                        type: string
                        description: Unique generated filename
                      originalName:
                        type: string
                        description: Original filename from user
                      size:
                        type: integer
                        description: File size in bytes
                      mimetype:
                        type: string
                        description: MIME type of the file
                      fileUrl:
                        type: string
                        format: uri
                        description: Public URL to access the lesson material
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /uploads/avatar:
    post:
      tags:
        - File Uploads
      summary: Upload User Avatar
      description: Upload a user avatar image
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Avatar image file
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Avatar uploaded successfully
                  data:
                    type: object
                    properties:
                      filename:
                        type: string
                        description: Unique generated filename
                      originalName:
                        type: string
                        description: Original filename from user
                      size:
                        type: integer
                        description: File size in bytes
                      mimetype:
                        type: string
                        description: MIME type of the file
                      avatarUrl:
                        type: string
                        format: uri
                        description: Public URL to access the avatar
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /uploads/certificate:
    post:
      tags:
        - File Uploads
      summary: Upload Certificate
      description: Upload a certificate file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                certificate:
                  type: string
                  format: binary
                  description: Certificate file
      responses:
        '200':
          description: Certificate uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Certificate uploaded successfully
                  data:
                    type: object
                    properties:
                      filename:
                        type: string
                        description: Unique generated filename
                      originalName:
                        type: string
                        description: Original filename from user
                      size:
                        type: integer
                        description: File size in bytes
                      mimetype:
                        type: string
                        description: MIME type of the file
                      certificateUrl:
                        type: string
                        format: uri
                        description: Public URL to access the certificate
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/uploads/{filename}':
    delete:
      tags:
        - File Uploads
      summary: Delete Uploaded File
      description: Delete an uploaded file
      security:
        - BearerAuth: []
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: Name of the file to delete
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - screenshots
              - courseImages
              - lessonMaterials
              - userAvatars
              - certificates
          description: File type for proper deletion
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: File deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /uploads/files:
    get:
      tags:
        - File Uploads
      summary: List Uploaded Files (Admin Only)
      description: List all uploaded files (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - screenshots
              - courseImages
              - lessonMaterials
              - userAvatars
              - certificates
          description: Filter by file type
      responses:
        '200':
          description: Files listed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      files:
                        type: array
                        items:
                          type: object
                          properties:
                            filename:
                              type: string
                              description: Name of the file
                            type:
                              type: string
                              enum:
                                - screenshots
                                - courseImages
                                - lessonMaterials
                                - userAvatars
                                - certificates
                              description: Type/category of the file
                            url:
                              type: string
                              format: uri
                              description: Public URL to access the file
                            path:
                              type: string
                              description: Server file system path
                      total:
                        type: integer
                        description: Total number of files
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /uploads/debug:
    get:
      tags:
        - File Uploads
      summary: Debug Upload Directories (Admin Only)
      description: Debug upload directories and file system information (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Debug information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      uploadPath:
                        type: string
                        description: Main upload directory path
                      uploadDirs:
                        type: object
                        description: All upload subdirectory paths
                        additionalProperties:
                          type: string
                      env:
                        type: object
                        properties:
                          UPLOAD_PATH:
                            type: string
                            nullable: true
                            description: Environment variable for upload path
                          BASE_URL:
                            type: string
                            nullable: true
                            description: Environment variable for base URL
                      directories:
                        type: object
                        description: Status of each upload directory
                        additionalProperties:
                          type: object
                          properties:
                            path:
                              type: string
                              description: Directory path
                            exists:
                              type: boolean
                              description: Whether directory exists
                            isDirectory:
                              type: boolean
                              description: Whether path is a directory
                            fileCount:
                              type: integer
                              description: Number of files in directory
                            files:
                              type: array
                              items:
                                type: string
                              description: List of filenames (first 10)
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/users/{id}':
    get:
      tags:
        - Users
      summary: Get User by ID
      description: Get user profile by ID (users can only view their own profile unless admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  email:
                    type: string
                    format: email
                  firstName:
                    type: string
                  lastName:
                    type: string
                  role:
                    type: string
                    enum:
                      - student
                      - instructor
                      - admin
                  avatarUrl:
                    type: string
                    format: uri
                    nullable: true
                  bio:
                    type: string
                    nullable: true
                  isActive:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
                  settings:
                    $ref: '#/components/schemas/UserSettings'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Users
      summary: Update User Profile
      description: Update user profile information (users can only update their own profile unless admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: User's first name
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: User's last name
                bio:
                  type: string
                  maxLength: 500
                  description: User's biography
                avatarUrl:
                  type: string
                  format: uri
                  description: URL to user's avatar image
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  firstName:
                    type: string
                  lastName:
                    type: string
                  bio:
                    type: string
                    nullable: true
                  avatarUrl:
                    type: string
                    format: uri
                    nullable: true
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Users
      summary: Delete User (Admin Only)
      description: 'Delete a user (admin only, cannot delete users with enrollments)'
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/users/{id}/enrollments':
    get:
      tags:
        - Users
      summary: Get User Enrollments
      description: Get user's course and class enrollments (users can only view their own unless admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User enrollments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  enrollments:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        enrollmentType:
                          type: string
                          enum:
                            - course
                            - class
                        progress:
                          type: integer
                        status:
                          type: string
                          enum:
                            - enrolled
                            - in_progress
                            - completed
                            - dropped
                        enrolledAt:
                          type: string
                          format: date-time
                        completedAt:
                          type: string
                          format: date-time
                          nullable: true
                        course:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                            topic:
                              type: string
                            imageUrl:
                              type: string
                              format: uri
                              nullable: true
                        class:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                            topic:
                              type: string
                        sponsorship:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            discountCode:
                              type: string
                            discountType:
                              type: string
                              enum:
                                - percentage
                                - fixed
                            discountValue:
                              type: number
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/users/{id}/enrolled-courses':
    get:
      tags:
        - Users
      summary: Get User Enrolled Courses
      description: Get user's enrolled courses with detailed information (users can only view their own unless admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User enrolled courses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    courseId:
                      type: string
                      format: uuid
                    courseTitle:
                      type: string
                    progress:
                      type: integer
                    status:
                      type: string
                      enum:
                        - enrolled
                        - in_progress
                        - completed
                        - dropped
                    enrolledAt:
                      type: string
                      format: date-time
                    lastAccessedAt:
                      type: string
                      format: date-time
                      nullable: true
                    instructorName:
                      type: string
                      nullable: true
                    topic:
                      type: string
                    duration:
                      type: string
                    imageUrl:
                      type: string
                      format: uri
                      nullable: true
                    sponsorship:
                      type: object
                      nullable: true
                      properties:
                        discountCode:
                          type: string
                        discountType:
                          type: string
                          enum:
                            - percentage
                            - fixed
                        discountValue:
                          type: number
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/users/{id}/enrolled-classes':
    get:
      tags:
        - Users
      summary: Get User Enrolled Classes
      description: Get user's enrolled classes with detailed information (users can only view their own unless admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User enrolled classes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    classId:
                      type: string
                      format: uuid
                    classTitle:
                      type: string
                    instructorName:
                      type: string
                      nullable: true
                    startDate:
                      type: string
                      format: date-time
                    endDate:
                      type: string
                      format: date-time
                    type:
                      type: string
                      enum:
                        - online
                        - hybrid
                    status:
                      type: string
                    enrolledAt:
                      type: string
                      format: date-time
                    topic:
                      type: string
                    duration:
                      type: string
                    location:
                      type: string
                      nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/users/{id}/dashboard-stats':
    get:
      tags:
        - Users
      summary: Get User Dashboard Stats
      description: Get user's dashboard statistics (users can only view their own unless admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User dashboard stats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalEnrolledCourses:
                    type: integer
                    description: Total number of enrolled courses
                  totalEnrolledClasses:
                    type: integer
                    description: Total number of enrolled classes
                  completedLessons:
                    type: integer
                    description: Number of completed lessons
                  totalLessons:
                    type: integer
                    description: Total number of lessons across enrolled courses
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/users/{id}/certifications':
    get:
      tags:
        - Users
      summary: Get User Certifications
      description: Get user's certifications (users can only view their own unless admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User certifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  certifications:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        certificationName:
                          type: string
                        issuer:
                          type: string
                        issuedDate:
                          type: string
                          format: date-time
                        expiryDate:
                          type: string
                          format: date-time
                          nullable: true
                        certificateUrl:
                          type: string
                          format: uri
                          nullable: true
                        verificationCode:
                          type: string
                        status:
                          type: string
                        course:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                            topic:
                              type: string
                        class:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                            topic:
                              type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/users/{id}/test-attempts':
    get:
      tags:
        - Users
      summary: Get User Test Attempts
      description: Get user's test attempts (users can only view their own unless admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User test attempts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  attempts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        testTitle:
                          type: string
                        courseTitle:
                          type: string
                        attemptNumber:
                          type: integer
                        score:
                          type: integer
                          nullable: true
                        totalQuestions:
                          type: integer
                        correctAnswers:
                          type: integer
                          nullable: true
                        status:
                          type: string
                          enum:
                            - in_progress
                            - completed
                            - abandoned
                        startedAt:
                          type: string
                          format: date-time
                        completedAt:
                          type: string
                          format: date-time
                          nullable: true
                        timeTakenMinutes:
                          type: integer
                          nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/users/{id}/discussions':
    get:
      tags:
        - Users
      summary: Get User Discussions
      description: Get user's discussions (users can only view their own unless admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User discussions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  discussions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        content:
                          type: string
                        category:
                          type: string
                        isPinned:
                          type: boolean
                        replyCount:
                          type: integer
                        lastActivityAt:
                          type: string
                          format: date-time
                        createdAt:
                          type: string
                          format: date-time
                        course:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                        class:
                          type: object
                          nullable: true
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/enrollments/courses:
    get:
      tags:
        - Users
      summary: Get Current User's Enrolled Courses
      description: Get current user's enrolled courses (frontend compatible)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user's enrolled courses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    courseId:
                      type: string
                      format: uuid
                    courseTitle:
                      type: string
                    progress:
                      type: integer
                    status:
                      type: string
                      enum:
                        - enrolled
                        - in_progress
                        - completed
                        - dropped
                    enrolledAt:
                      type: string
                      format: date-time
                    lastAccessedAt:
                      type: string
                      format: date-time
                      nullable: true
                    instructorName:
                      type: string
                      nullable: true
                    topic:
                      type: string
                    duration:
                      type: string
                    imageUrl:
                      type: string
                      format: uri
                      nullable: true
                    sponsorship:
                      type: object
                      nullable: true
                      properties:
                        discountCode:
                          type: string
                        discountType:
                          type: string
                          enum:
                            - percentage
                            - fixed
                        discountValue:
                          type: number
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/enrollments/classes:
    get:
      tags:
        - Users
      summary: Get Current User's Enrolled Classes
      description: Get current user's enrolled classes (frontend compatible)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user's enrolled classes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    classId:
                      type: string
                      format: uuid
                    classTitle:
                      type: string
                    instructorName:
                      type: string
                      nullable: true
                    startDate:
                      type: string
                      format: date-time
                    endDate:
                      type: string
                      format: date-time
                    type:
                      type: string
                      enum:
                        - online
                        - hybrid
                    status:
                      type: string
                    enrolledAt:
                      type: string
                      format: date-time
                    topic:
                      type: string
                    duration:
                      type: string
                    location:
                      type: string
                      nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/dashboard-stats:
    get:
      tags:
        - Users
      summary: Get Current User's Dashboard Stats
      description: Get current user's dashboard statistics (frontend compatible)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user's dashboard stats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalEnrolledCourses:
                    type: integer
                    description: Total number of enrolled courses
                  totalEnrolledClasses:
                    type: integer
                    description: Total number of enrolled classes
                  completedLessons:
                    type: integer
                    description: Number of completed lessons
                  totalLessons:
                    type: integer
                    description: Total number of lessons across enrolled courses
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/me/settings:
    get:
      tags:
        - Users
      summary: Get Current User's Settings
      description: 'Get current user''s preferences (notifications, privacy, appearance)'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user's settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  theme:
                    type: string
                    enum:
                      - light
                      - dark
                      - system
                    description: User's preferred theme
                  language:
                    type: string
                    description: User's preferred language
                  timezone:
                    type: string
                    description: User's timezone
                  emailNotifications:
                    type: boolean
                    description: Whether email notifications are enabled
                  pushNotifications:
                    type: boolean
                    description: Whether push notifications are enabled
                  courseNotifications:
                    type: boolean
                    description: Whether course-related notifications are enabled
                  classNotifications:
                    type: boolean
                    description: Whether class-related notifications are enabled
                  discussionNotifications:
                    type: boolean
                    description: Whether discussion-related notifications are enabled
                  marketingEmails:
                    type: boolean
                    description: Whether marketing emails are enabled
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - Users
      summary: Update Current User's Settings
      description: Update current user's preferences
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                theme:
                  type: string
                  enum:
                    - light
                    - dark
                    - system
                  description: User's preferred theme
                language:
                  type: string
                  description: User's preferred language
                timezone:
                  type: string
                  description: User's timezone
                emailNotifications:
                  type: boolean
                  description: Whether email notifications are enabled
                pushNotifications:
                  type: boolean
                  description: Whether push notifications are enabled
                courseNotifications:
                  type: boolean
                  description: Whether course-related notifications are enabled
                classNotifications:
                  type: boolean
                  description: Whether class-related notifications are enabled
                discussionNotifications:
                  type: boolean
                  description: Whether discussion-related notifications are enabled
                marketingEmails:
                  type: boolean
                  description: Whether marketing emails are enabled
      responses:
        '200':
          description: User settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/me/profile:
    put:
      tags:
        - Users
      summary: Update Current User's Profile
      description: Update current user's profile information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: User's first name
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: User's last name
                phone:
                  type: string
                  description: User's phone number
                location:
                  type: string
                  description: User's location
                bio:
                  type: string
                  maxLength: 500
                  description: User's biography
                timezone:
                  type: string
                  description: User's timezone
                email:
                  type: string
                  format: email
                  description: User's email address
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  firstName:
                    type: string
                  lastName:
                    type: string
                  avatarUrl:
                    type: string
                    format: uri
                    nullable: true
                  bio:
                    type: string
                    nullable: true
                  timezone:
                    type: string
                    nullable: true
                  location:
                    type: string
                    nullable: true
                  phone:
                    type: string
                    nullable: true
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /notifications:
    get:
      tags:
        - Notifications
      summary: Get Notifications
      description: List notifications with filters and pagination
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
          description: Filter by notification type
        - name: read
          in: query
          required: false
          schema:
            type: boolean
          description: Filter by read status
        - name: priority
          in: query
          required: false
          schema:
            type: string
            enum:
              - low
              - normal
              - high
              - urgent
          description: Filter by priority level
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - created_at
              - type
              - priority
              - is_read
            default: created_at
          description: Sort field
        - name: order
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Sort order
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Items per page
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                        title:
                          type: string
                        message:
                          type: string
                        data:
                          type: object
                          nullable: true
                        isRead:
                          type: boolean
                        priority:
                          type: string
                          enum:
                            - low
                            - normal
                            - high
                            - urgent
                        createdAt:
                          type: string
                          format: date-time
                        readAt:
                          type: string
                          format: date-time
                          nullable: true
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
              examples:
                course_enrollment:
                  summary: Course enrollment notification
                  value:
                    notifications:
                      - id: 550e8400-e29b-41d4-a716-446655440000
                        type: course_enrollment
                        title: Course Enrollment Successful
                        message: You have successfully enrolled in JavaScript Fundamentals
                        data:
                          courseId: course-uuid-123
                          courseTitle: JavaScript Fundamentals
                        isRead: false
                        priority: normal
                        createdAt: '2024-01-01T10:00:00Z'
                        readAt: null
                    pagination:
                      page: 1
                      limit: 20
                      total: 5
                      totalPages: 1
        '401':
          $ref: '#/components/responses/Unauthorized'
  /notifications/types:
    get:
      tags:
        - Notifications
      summary: Get Notification Types
      description: Get available notification types and priorities
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Notification types retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  types:
                    type: array
                    items:
                      type: string
                  priorities:
                    type: array
                    items:
                      type: string
                      enum:
                        - low
                        - normal
                        - high
                        - urgent
        '401':
          $ref: '#/components/responses/Unauthorized'
  /notifications/count:
    get:
      tags:
        - Notifications
      summary: Get Unread Count
      description: Get unread notification count
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
          description: Filter by notification type
      responses:
        '200':
          description: Unread count retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  unreadCount:
                    type: integer
              examples:
                unread_count:
                  summary: Unread notification count
                  value:
                    unreadCount: 5
        '401':
          $ref: '#/components/responses/Unauthorized'
  /notifications/preferences:
    get:
      tags:
        - Notifications
      summary: Get Notification Preferences
      description: Get user notification preferences
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Preferences retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  emailNotifications:
                    type: boolean
                  pushNotifications:
                    type: boolean
                  courseNotifications:
                    type: boolean
                  classNotifications:
                    type: boolean
                  discussionNotifications:
                    type: boolean
                  testNotifications:
                    type: boolean
                  certificationNotifications:
                    type: boolean
                  paymentNotifications:
                    type: boolean
                  systemNotifications:
                    type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - Notifications
      summary: Update Notification Preferences
      description: Update user notification preferences
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailNotifications:
                  type: boolean
                  description: Enable/disable email notifications
                pushNotifications:
                  type: boolean
                  description: Enable/disable push notifications
                courseNotifications:
                  type: boolean
                  description: Enable/disable course notifications
                classNotifications:
                  type: boolean
                  description: Enable/disable class notifications
                discussionNotifications:
                  type: boolean
                  description: Enable/disable discussion notifications
                testNotifications:
                  type: boolean
                  description: Enable/disable test notifications
                certificationNotifications:
                  type: boolean
                  description: Enable/disable certification notifications
                paymentNotifications:
                  type: boolean
                  description: Enable/disable payment notifications
                systemNotifications:
                  type: boolean
                  description: Enable/disable system notifications
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification preferences updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/notifications/{id}/read':
    patch:
      tags:
        - Notifications
      summary: Mark Notification as Read
      description: Mark a specific notification as read
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Notification ID
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification marked as read
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /notifications/read-all:
    patch:
      tags:
        - Notifications
      summary: Mark All Notifications as Read
      description: Mark all notifications as read
      security:
        - BearerAuth: []
      responses:
        '200':
          description: All notifications marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All notifications marked as read
                  updatedCount:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
  /notifications/read-by-type:
    patch:
      tags:
        - Notifications
      summary: Mark Notifications by Type as Read
      description: Mark all notifications of a specific type as read
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  type: string
                  description: Notification type to mark as read
      responses:
        '200':
          description: Notifications marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All course notifications marked as read
                  updatedCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/notifications/{id}':
    delete:
      tags:
        - Notifications
      summary: Delete Notification
      description: Delete a specific notification
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Notification ID
      responses:
        '200':
          description: Notification deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /notifications/bulk:
    delete:
      tags:
        - Notifications
      summary: Delete Multiple Notifications
      description: Bulk delete notifications
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of notification IDs to delete
                type:
                  type: string
                  description: Filter by notification type
                read:
                  type: boolean
                  description: Filter by read status
      responses:
        '200':
          description: Notifications deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notifications deleted successfully
                  deletedCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /notifications/system:
    post:
      tags:
        - Notifications
      summary: Send System Notification (Admin Only)
      description: Send system notification to all users (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - message
                - type
              properties:
                title:
                  type: string
                  description: Notification title
                message:
                  type: string
                  description: Notification message
                type:
                  type: string
                  description: Notification type
                priority:
                  type: string
                  enum:
                    - low
                    - normal
                    - high
                    - urgent
                  default: normal
                  description: Notification priority
                data:
                  type: object
                  description: Additional data for the notification
      responses:
        '200':
          description: System notification sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: System notification sent to 150 users
                  notificationCount:
                    type: integer
                  type:
                    type: string
                  title:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /notifications/cleanup:
    delete:
      tags:
        - Notifications
      summary: Cleanup Old Notifications (Admin Only)
      description: Clean up old notifications (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: daysOld
          in: query
          required: false
          schema:
            type: integer
            default: 90
            minimum: 1
          description: Days old to clean up
      responses:
        '200':
          description: Cleanup completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cleaned up 45 old notifications
                  deletedCount:
                    type: integer
                  daysOld:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /notifications/email-logs:
    get:
      tags:
        - Notifications
      summary: Get Email Logs (Admin Only)
      description: |
        Retrieve email sending logs and statistics for monitoring and debugging.
        This endpoint is restricted to admin users only.

        **Features:**
        - View all email send attempts with detailed information
        - Filter by status (sent/failed), recipient, and time period
        - Get delivery statistics and success rates
        - Monitor email performance and troubleshoot issues
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - sent
              - failed
          description: Filter by email status
        - name: recipient
          in: query
          required: false
          schema:
            type: string
          description: Filter by recipient email (partial match)
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 200
          description: Items per page
        - name: days
          in: query
          required: false
          schema:
            type: integer
            default: 7
            minimum: 1
            maximum: 365
          description: Number of days to look back
      responses:
        '200':
          description: Email logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmailLog'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
                  stats:
                    $ref: '#/components/schemas/EmailLogStats'
              examples:
                email_logs:
                  summary: Email logs with statistics
                  value:
                    logs:
                      - id: 550e8400-e29b-41d4-a716-446655440000
                        emailId: abc123def
                        recipientEmail: user@example.com
                        subject: Course Enrollment Successful
                        template: notification
                        messageId: <abc123@mailersend.net>
                        status: sent
                        errorMessage: null
                        durationMs: 1250
                        createdAt: '2024-01-01T10:00:00Z'
                        sentAt: '2024-01-01T10:00:00Z'
                    pagination:
                      page: 1
                      limit: 50
                      total: 25
                      totalPages: 1
                    stats:
                      total: 25
                      sent: 23
                      failed: 2
                      avgDuration: 1150.5
                      uniqueRecipients: 20
                      successRate: '92.00'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /search/suggestions:
    get:
      tags:
        - Search
      summary: Get Search Suggestions
      description: Get lightweight search suggestions for search bars
      security:
        - BearerAuth: []
      parameters:
        - name: scope
          in: query
          required: false
          schema:
            type: string
            enum:
              - classes
              - discussions
            default: classes
          description: Search scope (classes or discussions)
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 20
            default: 10
          description: Maximum number of suggestions to return (max 20)
      responses:
        '200':
          description: Search suggestions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        label:
                          type: string
                          description: Display title for the suggestion
                        subtitle:
                          type: string
                          description: 'Additional context (topic for classes, empty for discussions)'
                        type:
                          type: string
                          enum:
                            - class
                            - discussion
                          description: Type of the suggestion
        '400':
          description: Bad request - invalid scope parameter
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequest'
        '401':
          description: Unauthorized - authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
  /meta/classes-facets:
    get:
      tags:
        - Meta
      summary: Get Classes Facets
      description: Get counts per topic/type and price buckets for filter chips
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Facets retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  topics:
                    type: array
                    items:
                      type: object
                      properties:
                        topic:
                          type: string
                        count:
                          type: integer
                  types:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        count:
                          type: integer
                  priceRanges:
                    type: array
                    items:
                      type: object
                      properties:
                        range:
                          type: string
                        count:
                          type: integer
  /debug/uploads:
    get:
      tags:
        - Debug
      summary: Debug Upload Directory
      description: Debug endpoint to check upload directory structure and file access
      responses:
        '200':
          description: Upload directory debug information
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadPath:
                    type: string
                  resolvedUploadPath:
                    type: string
                  uploadExists:
                    type: boolean
                  screenshotsExists:
                    type: boolean
                  uploadContents:
                    type: array
                    items:
                      type: string
                  screenshotsContents:
                    type: array
                    items:
                      type: string
                  cwd:
                    type: string
  '/test-upload/{filename}':
    get:
      tags:
        - Debug
      summary: Test File Access
      description: Test endpoint to serve a specific file from the uploads directory
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: Name of the file to serve
      responses:
        '200':
          description: File served successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
  /scraping/urls:
    get:
      tags:
        - Scraping
      summary: Get Scraped URLs
      description: Get list of scraped URLs with filters and pagination (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - pending
              - in_progress
              - completed
              - failed
              - skipped
              - partial
          description: Filter by status
        - name: category
          in: query
          required: false
          schema:
            type: string
          description: Filter by category
        - name: level
          in: query
          required: false
          schema:
            type: string
          description: Filter by difficulty level
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Items per page
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search in URL or title
      responses:
        '200':
          description: Scraped URLs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      urls:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            url:
                              type: string
                              format: uri
                            status:
                              type: string
                              enum:
                                - pending
                                - in_progress
                                - completed
                                - failed
                                - skipped
                                - partial
                            title:
                              type: string
                              nullable: true
                            description:
                              type: string
                              nullable: true
                            category:
                              type: string
                              nullable: true
                            level:
                              type: string
                              nullable: true
                            metadata:
                              type: object
                              nullable: true
                            error_message:
                              type: string
                              nullable: true
                            retry_count:
                              type: integer
                              default: 0
                            last_attempt_at:
                              type: string
                              format: date-time
                              nullable: true
                            completed_at:
                              type: string
                              format: date-time
                              nullable: true
                            created_at:
                              type: string
                              format: date-time
                            updated_at:
                              type: string
                              format: date-time
                      pagination:
                        type: object
                        properties:
                          page:
                            type: integer
                          limit:
                            type: integer
                          total:
                            type: integer
                          pages:
                            type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Failed to fetch scraped URLs
                      details:
                        type: string
    post:
      tags:
        - Scraping
      summary: Add URL to Scraping Queue
      description: Add a single URL to the scraping queue (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  description: URL to scrape
                title:
                  type: string
                  description: Optional title for the URL
                description:
                  type: string
                  description: Optional description
                category:
                  type: string
                  description: Optional category
                level:
                  type: string
                  description: Optional difficulty level
                metadata:
                  type: object
                  description: Additional metadata
      responses:
        '201':
          description: URL added to scraping queue successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      url:
                        type: string
                        format: uri
                      status:
                        type: string
                        default: pending
                      title:
                        type: string
                        nullable: true
                      description:
                        type: string
                        nullable: true
                      category:
                        type: string
                        nullable: true
                      level:
                        type: string
                        nullable: true
                      metadata:
                        type: object
                        nullable: true
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: URL already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: URL already exists in scraping queue
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          status:
                            type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Failed to add URL to scraping queue
                      details:
                        type: string
  /scraping/urls/bulk:
    post:
      tags:
        - Scraping
      summary: Add Multiple URLs to Scraping Queue
      description: Add multiple URLs to the scraping queue in bulk (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - urls
              properties:
                urls:
                  type: array
                  items:
                    type: object
                    required:
                      - url
                    properties:
                      url:
                        type: string
                        format: uri
                        description: URL to scrape
                      title:
                        type: string
                        description: Optional title for the URL
                      description:
                        type: string
                        description: Optional description
                      category:
                        type: string
                        description: Optional category
                      level:
                        type: string
                        description: Optional difficulty level
                      metadata:
                        type: object
                        description: Additional metadata
                  minItems: 1
      responses:
        '201':
          description: URLs added to scraping queue successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      added:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            url:
                              type: string
                            status:
                              type: string
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            url:
                              type: string
                            error:
                              type: string
                            data:
                              type: object
                              nullable: true
                      summary:
                        type: object
                        properties:
                          total:
                            type: integer
                          added:
                            type: integer
                          errors:
                            type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Failed to add URLs to scraping queue
                      details:
                        type: string
  /scraping/urls/pending:
    get:
      tags:
        - Scraping
      summary: Get Pending URLs
      description: Get URLs that are pending processing (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of URLs to fetch
      responses:
        '200':
          description: Pending URLs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        url:
                          type: string
                          format: uri
                        status:
                          type: string
                          default: pending
                        title:
                          type: string
                          nullable: true
                        description:
                          type: string
                          nullable: true
                        category:
                          type: string
                          nullable: true
                        level:
                          type: string
                          nullable: true
                        metadata:
                          type: object
                          nullable: true
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Failed to fetch pending URLs
                      details:
                        type: string
  '/scraping/urls/{id}/status':
    put:
      tags:
        - Scraping
      summary: Update URL Status
      description: Update the status and metadata of a scraped URL (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: URL ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - pending
                    - in_progress
                    - completed
                    - failed
                    - skipped
                    - partial
                  description: New status for the URL
                title:
                  type: string
                  description: Optional title for the URL
                description:
                  type: string
                  description: Optional description
                category:
                  type: string
                  description: Optional category
                level:
                  type: string
                  description: Optional difficulty level
                metadata:
                  type: object
                  description: Additional metadata
                error_message:
                  type: string
                  description: Error message if status is failed
      responses:
        '200':
          description: URL status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      url:
                        type: string
                        format: uri
                      status:
                        type: string
                      title:
                        type: string
                        nullable: true
                      description:
                        type: string
                        nullable: true
                      category:
                        type: string
                        nullable: true
                      level:
                        type: string
                        nullable: true
                      metadata:
                        type: object
                        nullable: true
                      error_message:
                        type: string
                        nullable: true
                      retry_count:
                        type: integer
                      last_attempt_at:
                        type: string
                        format: date-time
                        nullable: true
                      completed_at:
                        type: string
                        format: date-time
                        nullable: true
                      updated_at:
                        type: string
                        format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Failed to update URL status
                      details:
                        type: string
  '/scraping/urls/{id}':
    delete:
      tags:
        - Scraping
      summary: Delete Scraped URL
      description: Delete a scraped URL from the system (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: URL ID
      responses:
        '200':
          description: Scraped URL deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: URL deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Failed to delete URL
                      details:
                        type: string
  /scraping/stats:
    get:
      tags:
        - Scraping
      summary: Get Scraping Statistics
      description: Get comprehensive scraping statistics and recent activity (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Scraping statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      stats:
                        type: object
                        properties:
                          total:
                            type: integer
                          by_status:
                            type: object
                            properties:
                              pending:
                                type: integer
                              in_progress:
                                type: integer
                              completed:
                                type: integer
                              failed:
                                type: integer
                              skipped:
                                type: integer
                              partial:
                                type: integer
                          summary:
                            type: object
                            properties:
                              pending:
                                type: integer
                              in_progress:
                                type: integer
                              completed:
                                type: integer
                              failed:
                                type: integer
                              skipped:
                                type: integer
                              partial:
                                type: integer
                      recent_activity:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            url:
                              type: string
                              format: uri
                            status:
                              type: string
                            title:
                              type: string
                              nullable: true
                            description:
                              type: string
                              nullable: true
                            category:
                              type: string
                              nullable: true
                            level:
                              type: string
                              nullable: true
                            updated_at:
                              type: string
                              format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Failed to fetch scraping statistics
                      details:
                        type: string
  /scraping/urls/reset-failed:
    post:
      tags:
        - Scraping
      summary: Reset Failed URLs
      description: Reset all failed URLs back to pending status for retry (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Failed URLs reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      reset_count:
                        type: integer
                        description: Number of URLs reset
                      message:
                        type: string
                        example: Reset 5 failed URLs to pending status
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Failed to reset failed URLs
                      details:
                        type: string
  '/tests/{id}':
    get:
      tags:
        - Tests
      summary: Get Test by ID
      description: Get test details by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
      responses:
        '200':
          description: Test details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  courseId:
                    type: string
                    format: uuid
                  courseTitle:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                    nullable: true
                  durationMinutes:
                    type: integer
                  passingScore:
                    type: integer
                  maxAttempts:
                    type: integer
                  orderIndex:
                    type: integer
                  isPublished:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Tests
      summary: Update Test
      description: Update test details (instructor/admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Test title
                description:
                  type: string
                  description: Test description
                durationMinutes:
                  type: integer
                  minimum: 1
                  description: Duration in minutes
                passingScore:
                  type: integer
                  minimum: 0
                  maximum: 100
                  description: Passing score percentage
                maxAttempts:
                  type: integer
                  minimum: 1
                  description: Maximum number of attempts allowed
                orderIndex:
                  type: integer
                  minimum: 0
                  description: Order index for test sequence
                isPublished:
                  type: boolean
                  description: Whether the test is published
      responses:
        '200':
          description: Test updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  description:
                    type: string
                    nullable: true
                  durationMinutes:
                    type: integer
                  passingScore:
                    type: integer
                  maxAttempts:
                    type: integer
                  orderIndex:
                    type: integer
                  isPublished:
                    type: boolean
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Tests
      summary: Delete Test
      description: Delete a test (instructor/admin only). Cannot delete if test has attempts.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
      responses:
        '200':
          description: Test deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Test deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/tests/{id}/questions':
    get:
      tags:
        - Tests
      summary: Get Test Questions
      description: Get all questions for a test
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
      responses:
        '200':
          description: Test questions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/TestQuestion'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Tests
      summary: Add Question to Test
      description: Add a new question to a test (instructor/admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - questionType
                - points
              properties:
                question:
                  type: string
                  description: Question text
                questionType:
                  type: string
                  enum:
                    - multiple_choice
                    - true_false
                    - short_answer
                  description: Type of question
                options:
                  type: array
                  items:
                    type: string
                  description: Answer options (required for multiple choice)
                correctAnswer:
                  type: integer
                  description: Index of correct answer (required for multiple choice/true-false)
                correctAnswerText:
                  type: string
                  description: Correct answer text (required for short answer)
                points:
                  type: integer
                  minimum: 1
                  description: Points for this question
                orderIndex:
                  type: integer
                  minimum: 0
                  description: Order index for question sequence
      responses:
        '201':
          description: Question added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  question:
                    type: string
                  questionType:
                    type: string
                  options:
                    type: array
                    items:
                      type: string
                    nullable: true
                  correctAnswer:
                    type: integer
                    nullable: true
                  correctAnswerText:
                    type: string
                    nullable: true
                  points:
                    type: integer
                  orderIndex:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/tests/{id}/questions/{questionId}':
    put:
      tags:
        - Tests
      summary: Update Question
      description: Update a question in a test (instructor/admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
        - name: questionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Question ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: Question text
                questionType:
                  type: string
                  enum:
                    - multiple_choice
                    - true_false
                    - short_answer
                  description: Type of question
                options:
                  type: array
                  items:
                    type: string
                  description: Answer options
                correctAnswer:
                  type: integer
                  description: Index of correct answer
                correctAnswerText:
                  type: string
                  description: Correct answer text
                points:
                  type: integer
                  minimum: 1
                  description: Points for this question
                orderIndex:
                  type: integer
                  minimum: 0
                  description: Order index
      responses:
        '200':
          description: Question updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  question:
                    type: string
                  questionType:
                    type: string
                  options:
                    type: array
                    items:
                      type: string
                    nullable: true
                  correctAnswer:
                    type: integer
                    nullable: true
                  correctAnswerText:
                    type: string
                    nullable: true
                  points:
                    type: integer
                  orderIndex:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Tests
      summary: Delete Question
      description: Delete a question from a test (instructor/admin only). Cannot delete if question has been answered.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
        - name: questionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Question ID
      responses:
        '200':
          description: Question deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Question deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      post:
        tags:
          - Tests
        summary: Flag a question for review
        description: Allow an authenticated user to flag a specific question within a test for manual review. One flag per user per question is enforced.
        security:
          - BearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
              format: uuid
            description: Test ID
          - name: questionId
            in: path
            required: true
            schema:
              type: string
              format: uuid
            description: Question ID
        requestBody:
          required: false
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    description: Optional reason provided by the user for flagging the question
        responses:
          '200':
            description: Question flagged for review
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                      example: true
                    message:
                      type: string
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
  '/tests/{id}/start':
    post:
      tags:
        - Tests
      summary: Start Test Attempt
      description: Start a new test attempt or resume an existing in-progress attempt
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
      responses:
        '200':
          description: Test attempt started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  attempt:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      testId:
                        type: string
                        format: uuid
                      userId:
                        type: string
                        format: uuid
                      attemptNumber:
                        type: integer
                      status:
                        type: string
                        enum:
                          - in_progress
                          - completed
                          - abandoned
                      startedAt:
                        type: string
                        format: date-time
                  questions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        question:
                          type: string
                        questionType:
                          type: string
                          enum:
                            - multiple_choice
                            - true_false
                            - short_answer
                        options:
                          type: array
                          items:
                            type: string
                          nullable: true
                        points:
                          type: integer
                        orderIndex:
                          type: integer
                        selectedAnswer:
                          type: integer
                          nullable: true
                        answerText:
                          type: string
                          nullable: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/tests/{id}/proceed':
    post:
      tags:
        - Tests
      summary: Force Proceed After Max Attempts
      description: Force progression after reaching maximum attempts
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
      responses:
        '200':
          description: Proceeding with last attempt score
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Proceeding with last attempt score
                  details:
                    type: object
                    properties:
                      lastAttemptId:
                        type: string
                        format: uuid
                      score:
                        type: integer
                      totalQuestions:
                        type: integer
                      correctAnswers:
                        type: integer
                      timeTakenMinutes:
                        type: integer
                      completedAt:
                        type: string
                        format: date-time
                      passed:
                        type: boolean
                      forcedProceed:
                        type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/tests/{id}/attempts/{attemptId}/answer':
    put:
      tags:
        - Tests
      summary: Submit Answer
      description: Submit an answer for a test question
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
        - name: attemptId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Attempt ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - questionId
              properties:
                questionId:
                  type: string
                  format: uuid
                  description: ID of the question being answered
                selectedAnswer:
                  type: integer
                  description: Selected answer index (for multiple choice/true-false)
                answerText:
                  type: string
                  description: Answer text (for short answer questions)
      responses:
        '200':
          description: Answer submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Answer saved successfully
                  isCorrect:
                    type: boolean
                    description: Whether the answer is correct
                  pointsEarned:
                    type: integer
                    description: Points earned for this answer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/tests/{id}/attempts/{attemptId}/submit':
    post:
      tags:
        - Tests
      summary: Submit Test
      description: Submit completed test
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
        - name: attemptId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Attempt ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                forceProceed:
                  type: boolean
                  default: false
                  description: Allow progression even if test is not passed
      responses:
        '200':
          description: Test submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    properties:
                      attemptId:
                        type: string
                        format: uuid
                      score:
                        type: integer
                        description: Score percentage
                      totalQuestions:
                        type: integer
                      correctAnswers:
                        type: integer
                      timeTakenMinutes:
                        type: integer
                      completedAt:
                        type: string
                        format: date-time
                      passed:
                        type: boolean
                      forceProceed:
                        type: boolean
                      message:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/tests/{id}/attempts/{attemptId}/results':
    get:
      tags:
        - Tests
      summary: Get Test Results
      description: Get detailed test results for a completed attempt
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
        - name: attemptId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Attempt ID
      responses:
        '200':
          description: Test results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  attempt:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      score:
                        type: integer
                        description: Score percentage
                      totalQuestions:
                        type: integer
                      correctAnswers:
                        type: integer
                      timeTakenMinutes:
                        type: integer
                      status:
                        type: string
                        enum:
                          - in_progress
                          - completed
                          - abandoned
                      startedAt:
                        type: string
                        format: date-time
                      completedAt:
                        type: string
                        format: date-time
                  questions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        question:
                          type: string
                        questionType:
                          type: string
                          enum:
                            - multiple_choice
                            - true_false
                            - short_answer
                        options:
                          type: array
                          items:
                            type: string
                          nullable: true
                        correctAnswer:
                          type: integer
                          nullable: true
                        correctAnswerText:
                          type: string
                          nullable: true
                        userAnswer:
                          type: integer
                          nullable: true
                        userAnswerText:
                          type: string
                          nullable: true
                        isCorrect:
                          type: boolean
                        pointsEarned:
                          type: integer
                        points:
                          type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/tests/{id}/questions/{questionId}/image/upload':
    post:
      tags:
        - Tests
      summary: Upload Question Image
      description: Upload an image for a test question (instructor/admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
        - name: questionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Question ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 'Image file (PNG, JPG, JPEG, GIF, SVG, max 5MB)'
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  imageUrl:
                    type: string
                    description: URL of the uploaded image
                  message:
                    type: string
                    example: Image uploaded successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/tests/{id}/analytics':
    get:
      tags:
        - Tests
      summary: Get Test Analytics
      description: Get comprehensive analytics for a test (admin/instructor only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
      responses:
        '200':
          description: Test analytics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalAttempts:
                    type: integer
                    description: Total number of completed attempts
                  averageScore:
                    type: number
                    description: Average score across all attempts
                  passRate:
                    type: number
                    description: Pass rate percentage
                  averageTimeMinutes:
                    type: number
                    description: Average time taken in minutes
                  questionAnalytics:
                    type: array
                    items:
                      type: object
                      properties:
                        questionId:
                          type: string
                          format: uuid
                        question:
                          type: string
                        questionType:
                          type: string
                          enum:
                            - multiple_choice
                            - true_false
                            - short_answer
                        points:
                          type: integer
                        totalAnswers:
                          type: integer
                          description: Total number of answers for this question
                        correctAnswers:
                          type: integer
                          description: Number of correct answers
                        correctRate:
                          type: number
                          description: Correct answer rate percentage
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/tests/{id}/attempts':
    get:
      tags:
        - Tests
      summary: List All Attempts for a Test
      description: List all attempts for a test (admin/instructor only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
          description: Number of results to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Number of results to skip
      responses:
        '200':
          description: Test attempts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  test:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                      passingScore:
                        type: integer
                  attempts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        userId:
                          type: string
                          format: uuid
                        userName:
                          type: string
                          description: Full name of the user
                        userEmail:
                          type: string
                          format: email
                        attemptNumber:
                          type: integer
                        score:
                          type: integer
                          nullable: true
                        totalQuestions:
                          type: integer
                        correctAnswers:
                          type: integer
                          nullable: true
                        status:
                          type: string
                          enum:
                            - in_progress
                            - completed
                            - abandoned
                        startedAt:
                          type: string
                          format: date-time
                        completedAt:
                          type: string
                          format: date-time
                          nullable: true
                        timeTakenMinutes:
                          type: integer
                          nullable: true
                        passed:
                          type: boolean
                          nullable: true
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      limit:
                        type: integer
                      offset:
                        type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/tests/{id}/my-attempts':
    get:
      tags:
        - Tests
      summary: Get User's Own Test Attempts
      description: Get user's own test attempts (student view)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
      responses:
        '200':
          description: User's test attempts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  test:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                      passingScore:
                        type: integer
                      maxAttempts:
                        type: integer
                  attempts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        attemptNumber:
                          type: integer
                        score:
                          type: integer
                          nullable: true
                        totalQuestions:
                          type: integer
                        correctAnswers:
                          type: integer
                          nullable: true
                        status:
                          type: string
                          enum:
                            - in_progress
                            - completed
                            - abandoned
                        startedAt:
                          type: string
                          format: date-time
                        completedAt:
                          type: string
                          format: date-time
                          nullable: true
                        timeTakenMinutes:
                          type: integer
                          nullable: true
                        passed:
                          type: boolean
                          nullable: true
                  currentAttempts:
                    type: integer
                    description: Number of attempts made so far
                  canStartNew:
                    type: boolean
                    description: Whether user can start a new attempt
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/tests/{id}/attempts/{attemptId}/details':
    get:
      tags:
        - Tests
      summary: Get Detailed Answers for a Student's Attempt
      description: Get detailed answers for a student's attempt (admin/instructor only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Test ID
        - name: attemptId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Attempt ID
      responses:
        '200':
          description: Detailed answers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  attempt:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      studentName:
                        type: string
                        description: Full name of the student
                      studentEmail:
                        type: string
                        format: email
                      score:
                        type: integer
                        nullable: true
                      timeSpent:
                        type: integer
                        nullable: true
                        description: Time spent in minutes
                      attemptNumber:
                        type: integer
                      completedAt:
                        type: string
                        format: date-time
                        nullable: true
                      status:
                        type: string
                        enum:
                          - in_progress
                          - completed
                          - abandoned
                  answers:
                    type: array
                    items:
                      type: object
                      properties:
                        questionId:
                          type: string
                          format: uuid
                        question:
                          type: string
                        questionType:
                          type: string
                          enum:
                            - multiple_choice
                            - true_false
                            - short_answer
                        options:
                          type: array
                          items:
                            type: string
                          nullable: true
                        correctAnswer:
                          type: integer
                          nullable: true
                        correctAnswerText:
                          type: string
                          nullable: true
                        userAnswer:
                          type: integer
                          nullable: true
                        userAnswerText:
                          type: string
                          nullable: true
                        isCorrect:
                          type: boolean
                        pointsEarned:
                          type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum:
            - student
            - instructor
            - admin
            - sponsor
        avatarUrl:
          type: string
          format: uri
        bio:
          type: string
        googleId:
          type: string
        googleEmail:
          type: string
        authProvider:
          type: string
          enum:
            - local
            - google
        emailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        isActive:
          type: boolean
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum:
            - student
            - instructor
            - admin
            - sponsor
        profilePicture:
          type: string
          format: uri
        bio:
          type: string
        createdAt:
          type: string
          format: date-time
        authProvider:
          type: string
          enum:
            - local
            - google
        emailVerified:
          type: boolean
        settings:
          type: object
          properties:
            theme:
              type: string
              enum:
                - light
                - dark
                - system
            language:
              type: string
            timezone:
              type: string
    Enrollment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the enrollment
        userId:
          type: string
          format: uuid
          description: ID of the enrolled user
        courseId:
          type: string
          format: uuid
          nullable: true
          description: ID of the course (if enrollment is for a course)
        classId:
          type: string
          format: uuid
          nullable: true
          description: ID of the class (if enrollment is for a class)
        enrollmentType:
          type: string
          enum:
            - course
            - class
          description: Type of enrollment
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: Progress percentage through the course/class
        status:
          type: string
          enum:
            - enrolled
            - in_progress
            - completed
            - dropped
          description: Current status of the enrollment
        sponsorshipId:
          type: string
          format: uuid
          nullable: true
          description: ID of the sponsorship used (if applicable)
        isFreeEnrollment:
          type: boolean
          description: Whether this enrollment was free (100% discount)
        originalPrice:
          type: number
          description: Original price before sponsorship discount
        finalPrice:
          type: number
          description: Final price paid after sponsorship discount
        discountAmount:
          type: number
          description: Amount of discount applied
        enrolledAt:
          type: string
          format: date-time
          description: When the user was enrolled
        completedAt:
          type: string
          format: date-time
          nullable: true
          description: When the user completed the course/class
      required:
        - id
        - userId
        - enrollmentType
        - progress
        - status
        - enrolledAt
    Sponsorship:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the sponsorship
        sponsorId:
          type: string
          format: uuid
          description: ID of the sponsor creating the sponsorship
        courseIds:
          type: array
          items:
            type: string
            format: uuid
          description: Array of course IDs for multi-course sponsorships
        courseTitles:
          type: array
          items:
            type: string
          description: Array of course titles for multi-course sponsorships
        coursePrices:
          type: array
          items:
            type: number
          description: Array of course prices for multi-course sponsorships
        discountCode:
          type: string
          description: Unique discount code for students to use
        discountType:
          type: string
          enum:
            - percentage
            - fixed
          description: Type of discount (percentage or fixed amount)
        discountValue:
          type: number
          description: Value of the discount (percentage as decimal or fixed amount)
        maxStudents:
          type: integer
          minimum: 1
          description: Maximum number of students who can use this sponsorship
        studentsUsed:
          type: integer
          minimum: 0
          description: Number of students who have already used this sponsorship
        remainingSpots:
          type: integer
          minimum: 0
          description: Number of remaining spots available
        startDate:
          type: string
          format: date
          description: Start date when the sponsorship becomes active
        endDate:
          type: string
          format: date
          description: End date when the sponsorship expires
        status:
          type: string
          enum:
            - active
            - paused
            - expired
            - completed
          description: Current status of the sponsorship
        completionRate:
          type: number
          minimum: 0
          maximum: 100
          description: Completion rate percentage of sponsored students
        notes:
          type: string
          description: Additional notes about the sponsorship
        isFullyFunded:
          type: boolean
          description: Whether the sponsorship provides 100% discount (free enrollment)
        isPaid:
          type: boolean
          default: false
          description: Whether the sponsorship has been paid for (admin tracking)
        paidAt:
          type: string
          format: date-time
          nullable: true
          description: When the sponsorship was marked as paid
        paymentId:
          type: string
          format: uuid
          nullable: true
          description: Reference to payment record (if applicable)
        paymentReference:
          type: string
          nullable: true
          description: 'External payment reference (e.g., bank transfer reference)'
        paidAmount:
          type: number
          nullable: true
          description: Amount paid for the sponsorship
        paidCurrency:
          type: string
          default: USD
          description: Currency of the payment
        createdBy:
          type: string
          enum:
            - sponsor
            - admin
          default: sponsor
          description: Who created the sponsorship (sponsor or admin)
        adminNote:
          type: string
          nullable: true
          description: Internal admin note about the sponsorship
        invoiceNumber:
          type: string
          nullable: true
          description: Generated invoice number for the sponsorship
        createdAt:
          type: string
          format: date-time
          description: When the sponsorship was created
        updatedAt:
          type: string
          format: date-time
          description: When the sponsorship was last updated
      required:
        - id
        - sponsorId
        - discountCode
        - discountType
        - discountValue
        - maxStudents
        - startDate
        - endDate
        - status
        - createdAt
        - updatedAt
    SponsorshipOpportunity:
      SponsorshipOpportunity:
        type: object
        properties:
          id:
            type: string
            format: uuid
            description: Unique identifier for the sponsorship opportunity
          courseId:
            type: string
            format: uuid
            description: ID of the course seeking sponsorship
          courseName:
            type: string
            description: Name of the course
          courseDescription:
            type: string
            description: Description of the course
          courseDuration:
            type: string
            description: Duration of the course
          courseTopic:
            type: string
            description: Topic/category of the course
          coursePrice:
            type: number
            description: Price of the course
          instructor:
            type: string
            description: Name of the instructor
          instructorAvatar:
            type: string
            description: URL to instructor's avatar
          instructorBio:
            type: string
            description: Instructor's biography
          targetStudents:
            type: integer
            minimum: 1
            description: Target number of students to sponsor
          fundingGoal:
            type: number
            minimum: 0
            description: Funding goal amount
          fundingRaised:
            type: number
            minimum: 0
            description: Amount of funding raised so far
          fundingProgress:
            type: string
            description: Percentage of funding goal achieved
          urgency:
            type: string
            enum:
              - low
              - medium
              - high
            description: Urgency level of the opportunity
          demographics:
            type: string
            description: Target student demographics
          impactDescription:
            type: string
            description: Description of the impact this sponsorship will have
          isActive:
            type: boolean
            description: Whether the opportunity is currently active
          createdAt:
            type: string
            format: date-time
            description: When the opportunity was created
          updatedAt:
            type: string
            format: date-time
            description: When the opportunity was last updated
        required:
          - id
          - courseId
          - targetStudents
          - fundingGoal
          - urgency
          - demographics
          - impactDescription
          - isActive
          - createdAt
          - updatedAt
    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the payment
        userId:
          type: string
          format: uuid
          description: ID of the user making the payment
        courseId:
          type: string
          format: uuid
          nullable: true
          description: ID of the course (if payment is for course enrollment)
        classId:
          type: string
          format: uuid
          nullable: true
          description: ID of the class (if payment is for class enrollment)
        paymentType:
          type: string
          enum:
            - course
            - class
          description: Type of item being purchased
        amount:
          type: number
          description: Final amount paid after discounts
        originalAmount:
          type: number
          description: Original price before any discounts
        discountAmount:
          type: number
          description: Amount of discount applied
        currency:
          type: string
          default: NGN
          description: Currency of the payment
        flutterwaveReference:
          type: string
          description: Flutterwave payment reference
        flutterwaveTransactionId:
          type: string
          nullable: true
          description: Flutterwave transaction ID (null for free enrollments)
        paymentMethod:
          type: string
          enum:
            - card
            - bank_transfer
            - ussd
            - mobile_money
            - qr_code
            - barter
            - mpesa
            - gh_mobile_money
            - ug_mobile_money
            - franc_mobile_money
            - emalipay
          description: Payment method used
        status:
          type: string
          enum:
            - pending
            - successful
            - failed
            - cancelled
            - refunded
          description: Current status of the payment
        isFreeEnrollment:
          type: boolean
          description: Whether this payment represents a free enrollment (100% discount)
        sponsorshipId:
          type: string
          format: uuid
          nullable: true
          description: ID of the sponsorship used (if applicable)
        metadata:
          type: object
          description: Additional payment metadata
        errorMessage:
          type: string
          nullable: true
          description: Error message if payment failed
        createdAt:
          type: string
          format: date-time
          description: When the payment was created
        updatedAt:
          type: string
          format: date-time
          description: When the payment was last updated
      required:
        - id
        - userId
        - paymentType
        - amount
        - status
        - isFreeEnrollment
        - createdAt
        - updatedAt
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the notification
        type:
          type: string
          description: 'Type of notification (e.g., course_enrollment, discussion_reply, test_result)'
        title:
          type: string
          description: Notification title
        message:
          type: string
          description: Notification message content
        data:
          type: object
          nullable: true
          description: 'Additional data for the notification (e.g., courseId, discussionId)'
        isRead:
          type: boolean
          description: Whether the notification has been read
        priority:
          type: string
          enum:
            - low
            - normal
            - high
            - urgent
          description: Priority level of the notification
        createdAt:
          type: string
          format: date-time
          description: When the notification was created
        readAt:
          type: string
          format: date-time
          nullable: true
          description: When the notification was marked as read
      required:
        - id
        - type
        - title
        - message
        - isRead
        - priority
        - createdAt
    NotificationPreferences:
      type: object
      properties:
        emailNotifications:
          type: boolean
          default: true
          description: Enable/disable email notifications
        pushNotifications:
          type: boolean
          default: true
          description: Enable/disable push notifications (future feature)
        courseNotifications:
          type: boolean
          default: true
          description: Enable/disable course-related notifications
        classNotifications:
          type: boolean
          default: true
          description: Enable/disable class-related notifications
        discussionNotifications:
          type: boolean
          default: true
          description: Enable/disable discussion-related notifications
        testNotifications:
          type: boolean
          default: true
          description: Enable/disable test-related notifications
        certificationNotifications:
          type: boolean
          default: true
          description: Enable/disable certification-related notifications
        paymentNotifications:
          type: boolean
          default: true
          description: Enable/disable payment-related notifications
        systemNotifications:
          type: boolean
          default: true
          description: Enable/disable system notifications
      required:
        - emailNotifications
        - pushNotifications
        - courseNotifications
        - classNotifications
        - discussionNotifications
        - testNotifications
        - certificationNotifications
        - paymentNotifications
        - systemNotifications
    EmailLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the email log entry
        emailId:
          type: string
          description: Unique email identifier used for tracking
        recipientEmail:
          type: string
          format: email
          description: Email address of the recipient
        subject:
          type: string
          description: Subject line of the email
        template:
          type: string
          nullable: true
          description: 'Template name used for the email (e.g., ''notification'')'
        messageId:
          type: string
          nullable: true
          description: SMTP message ID returned by the email service
        status:
          type: string
          enum:
            - sent
            - failed
          description: Status of the email send attempt
        errorMessage:
          type: string
          nullable: true
          description: Error message if the email failed to send
        durationMs:
          type: integer
          description: Time taken to send the email in milliseconds
        createdAt:
          type: string
          format: date-time
          description: When the email log entry was created
        sentAt:
          type: string
          format: date-time
          description: When the email was actually sent
      required:
        - id
        - emailId
        - recipientEmail
        - subject
        - status
        - durationMs
        - createdAt
        - sentAt
    EmailLogStats:
      type: object
      properties:
        total:
          type: integer
          description: Total number of emails in the time period
        sent:
          type: integer
          description: Number of successfully sent emails
        failed:
          type: integer
          description: Number of failed email attempts
        avgDuration:
          type: number
          description: Average send duration in milliseconds
        uniqueRecipients:
          type: integer
          description: Number of unique recipients
        successRate:
          type: string
          description: 'Success rate percentage as a string (e.g., "92.00")'
      required:
        - total
        - sent
        - failed
        - avgDuration
        - uniqueRecipients
        - successRate
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
    Test:
      type: object
      properties:
        id:
          type: string
          format: uuid
        courseId:
          type: string
          format: uuid
        lessonId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        durationMinutes:
          type: integer
        passingScore:
          type: integer
        maxAttempts:
          type: integer
        orderIndex:
          type: integer
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Discussion:
      Discussion:
        type: object
        properties:
          id:
            type: string
            format: uuid
            description: Unique identifier for the discussion
          title:
            type: string
            description: Title of the discussion
          content:
            type: string
            description: Content/body of the discussion
          category:
            type: string
            enum:
              - general
              - course
              - lesson
              - class
              - question
              - help
              - feedback
            description: Category of the discussion
          authorId:
            type: string
            format: uuid
            description: ID of the discussion author
          authorName:
            type: string
            description: Name of the discussion author
          authorAvatar:
            type: string
            description: URL to author's avatar
          courseId:
            type: string
            format: uuid
            nullable: true
            description: ID of the associated course (if course-specific)
          courseTitle:
            type: string
            description: Title of the associated course
          lessonId:
            type: string
            format: uuid
            nullable: true
            description: ID of the associated lesson (if lesson-specific)
          lessonTitle:
            type: string
            description: Title of the associated lesson
          classId:
            type: string
            format: uuid
            nullable: true
            description: ID of the associated class (if class-specific)
          classTitle:
            type: string
            description: Title of the associated class
          tags:
            type: array
            items:
              type: string
            description: Array of tags for better organization
          isPinned:
            type: boolean
            description: Whether the discussion is pinned
          replyCount:
            type: integer
            minimum: 0
            description: Number of replies to the discussion
          likesCount:
            type: integer
            minimum: 0
            description: Number of likes on the discussion
          lastActivityAt:
            type: string
            format: date-time
            description: When the discussion was last active
          createdAt:
            type: string
            format: date-time
            description: When the discussion was created
        required:
          - id
          - title
          - content
          - category
          - authorId
          - createdAt
    DiscussionReply:
      DiscussionReply:
        type: object
        properties:
          id:
            type: string
            format: uuid
            description: Unique identifier for the reply
          content:
            type: string
            description: Content of the reply
          authorId:
            type: string
            format: uuid
            description: ID of the reply author
          authorName:
            type: string
            description: Name of the reply author
          authorAvatar:
            type: string
            description: URL to author's avatar
          discussionId:
            type: string
            format: uuid
            description: ID of the parent discussion
          parentReplyId:
            type: string
            format: uuid
            nullable: true
            description: ID of the parent reply (for nested replies)
          createdAt:
            type: string
            format: date-time
            description: When the reply was created
        required:
          - id
          - content
          - authorId
          - discussionId
          - createdAt
    DiscussionCategory:
      DiscussionCategory:
        type: object
        properties:
          key:
            type: string
            description: Unique key identifier for the category
          name:
            type: string
            description: Display name of the category
          description:
            type: string
            description: Description of what the category is for
          icon:
            type: string
            description: Icon representation for the category
          color:
            type: string
            description: Color code for the category
          isActive:
            type: boolean
            description: Whether the category is currently active
          sortOrder:
            type: integer
            description: Order for sorting categories
          createdAt:
            type: string
            format: date-time
            description: When the category was created
          updatedAt:
            type: string
            format: date-time
            description: When the category was last updated
        required:
          - key
          - name
          - description
          - icon
          - color
          - isActive
          - sortOrder
    Certification:
      Certification:
        type: object
        properties:
          id:
            type: string
            format: uuid
            description: Unique identifier for the certification
          title:
            type: string
            description: Title of the certification
          description:
            type: string
            description: Description of the certification
          issuerName:
            type: string
            description: Name of the issuing organization
          issuedAt:
            type: string
            format: date-time
            description: When the certification was issued
          expiryDate:
            type: string
            format: date-time
            nullable: true
            description: When the certification expires (if applicable)
          certificateUrl:
            type: string
            description: URL to the certificate file
          verificationCode:
            type: string
            description: Unique verification code for the certification
          status:
            type: string
            enum:
              - issued
              - expired
              - revoked
            description: Current status of the certification
          courseId:
            type: string
            format: uuid
            nullable: true
            description: ID of the associated course
          classId:
            type: string
            format: uuid
            nullable: true
            description: ID of the associated class
          createdAt:
            type: string
            format: date-time
            description: When the certification was created
        required:
          - id
          - title
          - issuerName
          - issuedAt
          - verificationCode
          - status
    CertificationProgram:
      CertificationProgram:
        type: object
        properties:
          id:
            type: string
            format: uuid
            description: Unique identifier for the certification program
          title:
            type: string
            description: Title of the certification program
          description:
            type: string
            description: Description of the certification program
          duration:
            type: string
            description: Estimated duration to complete the program
          level:
            type: string
            description: Difficulty level of the program
          prerequisites:
            type: string
            description: Prerequisites required to enroll
          price:
            type: number
            minimum: 0
            description: Price of the certification program
          isActive:
            type: boolean
            description: Whether the program is currently active
          modules:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                title:
                  type: string
                description:
                  type: string
                duration:
                  type: string
                orderIndex:
                  type: integer
            description: List of modules in the program
          createdAt:
            type: string
            format: date-time
            description: When the program was created
          updatedAt:
            type: string
            format: date-time
            description: When the program was last updated
        required:
          - id
          - title
          - description
          - isActive
          - createdAt
          - updatedAt
    Lesson:
      Lesson:
        type: object
        properties:
          id:
            type: string
            format: uuid
            description: Unique identifier for the lesson
          courseId:
            type: string
            format: uuid
            description: ID of the course this lesson belongs to
          courseTitle:
            type: string
            description: Title of the parent course
          title:
            type: string
            description: Title of the lesson
          description:
            type: string
            description: Description of the lesson
          content:
            type: string
            description: Main content of the lesson
          videoUrl:
            type: string
            description: URL to the lesson video
          durationMinutes:
            type: integer
            minimum: 0
            description: Duration of the lesson in minutes
          orderIndex:
            type: integer
            minimum: 0
            description: Order of the lesson within the course
          isPublished:
            type: boolean
            description: Whether the lesson is published and accessible
          createdAt:
            type: string
            format: date-time
            description: When the lesson was created
          updatedAt:
            type: string
            format: date-time
            description: When the lesson was last updated
        required:
          - id
          - courseId
          - title
          - orderIndex
          - isPublished
          - createdAt
          - updatedAt
    Class:
      Class:
        type: object
        properties:
          id:
            type: string
            format: uuid
            description: Unique identifier for the class
          title:
            type: string
            description: Title of the class
          description:
            type: string
            description: Description of the class
          topic:
            type: string
            description: Topic/category of the class
          type:
            type: string
            enum:
              - online
              - offline
            description: Type of class (online or offline)
          instructorId:
            type: string
            format: uuid
            description: ID of the instructor
          instructorName:
            type: string
            description: Name of the instructor
          instructorAvatar:
            type: string
            description: URL to instructor's avatar
          startDate:
            type: string
            format: date-time
            description: Start date and time of the class
          endDate:
            type: string
            format: date-time
            nullable: true
            description: End date and time of the class
          duration:
            type: string
            description: Duration of the class
          location:
            type: string
            description: Location of the class (or "Online" for online classes)
          price:
            type: number
            minimum: 0
            description: Price of the class
          availableSlots:
            type: integer
            minimum: 0
            description: Number of available slots
          totalSlots:
            type: integer
            minimum: 1
            description: Total number of slots
          isPublished:
            type: boolean
            description: Whether the class is published and accessible
          courses:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                title:
                  type: string
                topic:
                  type: string
                duration:
                  type: string
                orderIndex:
                  type: integer
            description: List of courses associated with this class
          createdAt:
            type: string
            format: date-time
            description: When the class was created
          updatedAt:
            type: string
            format: date-time
            description: When the class was last updated
        required:
          - id
          - title
          - description
          - topic
          - type
          - instructorId
          - startDate
          - duration
          - price
          - availableSlots
          - totalSlots
          - isPublished
          - createdAt
          - updatedAt
    Course:
      Course:
        type: object
        properties:
          id:
            type: string
            format: uuid
            description: Unique identifier for the course
          title:
            type: string
            description: Title of the course
          description:
            type: string
            description: Description of the course
          topic:
            type: string
            description: Topic/category of the course
          type:
            type: string
            enum:
              - online
              - offline
            description: Type of course (online or offline)
          price:
            type: number
            minimum: 0
            description: Price of the course
          duration:
            type: string
            description: Duration of the course
          certification:
            type: string
            description: Type of certification offered
          difficulty:
            type: string
            description: Difficulty level of the course
          objectives:
            type: string
            description: Learning objectives of the course
          prerequisites:
            type: string
            description: Prerequisites required for the course
          syllabus:
            type: string
            description: Course syllabus and structure
          tags:
            type: array
            items:
              type: string
            description: Array of tags for the course
          imageUrl:
            type: string
            description: URL to the course image
          instructorId:
            type: string
            format: uuid
            description: ID of the instructor
          instructorName:
            type: string
            description: Name of the instructor
          isPublished:
            type: boolean
            description: Whether the course is published and accessible
          enrollmentCount:
            type: integer
            minimum: 0
            description: Number of students enrolled
          lessonCount:
            type: integer
            minimum: 0
            description: Number of lessons in the course
          testCount:
            type: integer
            minimum: 0
            description: Number of tests in the course
          rating:
            type: number
            minimum: 0
            maximum: 5
            description: Average rating of the course
          studentCount:
            type: integer
            minimum: 0
            description: Total number of students
          createdAt:
            type: string
            format: date-time
            description: When the course was created
          updatedAt:
            type: string
            format: date-time
            description: When the course was last updated
        required:
          - id
          - title
          - description
          - topic
          - type
          - price
          - duration
          - isPublished
          - createdAt
          - updatedAt
    CourseInstructor:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the instructor
        firstName:
          type: string
          description: Instructor's first name
        lastName:
          type: string
          description: Instructor's last name
        avatarUrl:
          type: string
          nullable: true
          description: URL to instructor's avatar image
        bio:
          type: string
          nullable: true
          description: Instructor's biography
        email:
          type: string
          format: email
          description: Instructor's email address
        specialization:
          type: string
          nullable: true
          description: Instructor's area of specialization
        rating:
          type: number
          minimum: 0
          maximum: 5
          nullable: true
          description: Average instructor rating
        courseCount:
          type: integer
          minimum: 0
          description: Number of courses taught by instructor
      required:
        - id
        - firstName
        - lastName
    TestQuestion:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the question
        question:
          type: string
          description: The question text
        questionType:
          type: string
          enum:
            - multiple_choice
            - true_false
            - short_answer
            - essay
          description: Type of question
        options:
          type: array
          items:
            type: string
          nullable: true
          description: Array of options for multiple choice questions
        correctAnswer:
          type: integer
          nullable: true
          description: Index of correct answer for multiple choice questions
        correctAnswerText:
          type: string
          nullable: true
          description: Correct answer text for short answer questions
        points:
          type: integer
          minimum: 1
          description: Points awarded for correct answer
        orderIndex:
          type: integer
          minimum: 1
          description: Order of question in the test
        imageUrl:
          type: string
          nullable: true
          description: URL to question image (if applicable)
        explanation:
          type: string
          nullable: true
          description: Explanation of the correct answer
      required:
        - id
        - question
        - questionType
        - points
        - orderIndex
    TestAttempt:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the test attempt
        userId:
          type: string
          format: uuid
          description: ID of the user taking the test
        testId:
          type: string
          format: uuid
          description: ID of the test being attempted
        status:
          type: string
          enum:
            - in_progress
            - completed
            - abandoned
          description: Current status of the test attempt
        score:
          type: number
          minimum: 0
          nullable: true
          description: Final score achieved
        maxScore:
          type: number
          minimum: 1
          description: Maximum possible score
        percentage:
          type: number
          minimum: 0
          maximum: 100
          nullable: true
          description: Percentage score achieved
        passed:
          type: boolean
          nullable: true
          description: Whether the attempt passed the test
        startedAt:
          type: string
          format: date-time
          description: When the test attempt started
        completedAt:
          type: string
          format: date-time
          nullable: true
          description: When the test attempt was completed
        timeSpent:
          type: integer
          minimum: 0
          nullable: true
          description: Time spent on test in seconds
        answers:
          type: array
          items:
            type: object
            properties:
              questionId:
                type: string
                format: uuid
              answer:
                type: string
              isCorrect:
                type: boolean
                nullable: true
              points:
                type: number
                minimum: 0
          nullable: true
          description: Array of answers provided
      required:
        - id
        - userId
        - testId
        - status
        - maxScore
        - startedAt
    UserSettings:
      type: object
      properties:
        theme:
          type: string
          enum:
            - light
            - dark
            - system
          default: system
          description: User's preferred theme
        language:
          type: string
          default: en
          description: User's preferred language
        timezone:
          type: string
          default: UTC
          description: User's timezone
        emailNotifications:
          type: boolean
          default: true
          description: Enable email notifications
        pushNotifications:
          type: boolean
          default: true
          description: Enable push notifications
        courseNotifications:
          type: boolean
          default: true
          description: Enable course-related notifications
        classNotifications:
          type: boolean
          default: true
          description: Enable class-related notifications
        discussionNotifications:
          type: boolean
          default: true
          description: Enable discussion-related notifications
        testNotifications:
          type: boolean
          default: true
          description: Enable test-related notifications
        certificationNotifications:
          type: boolean
          default: true
          description: Enable certification-related notifications
        paymentNotifications:
          type: boolean
          default: true
          description: Enable payment-related notifications
        systemNotifications:
          type: boolean
          default: true
          description: Enable system notifications
      required:
        - theme
        - language
        - timezone
        - emailNotifications
        - pushNotifications
        - courseNotifications
        - classNotifications
        - discussionNotifications
        - testNotifications
        - certificationNotifications
        - paymentNotifications
        - systemNotifications
    DiscussionStats:
      type: object
      properties:
        totalDiscussions:
          type: integer
          minimum: 0
          description: Total number of discussions
        totalReplies:
          type: integer
          minimum: 0
          description: Total number of replies
        totalLikes:
          type: integer
          minimum: 0
          description: Total number of likes
        totalViews:
          type: integer
          minimum: 0
          description: Total number of views
        activeDiscussions:
          type: integer
          minimum: 0
          description: Number of active discussions (recent activity)
        topContributors:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
                format: uuid
              firstName:
                type: string
              lastName:
                type: string
              avatarUrl:
                type: string
                nullable: true
              contributionCount:
                type: integer
                minimum: 0
          description: Top contributors to discussions
        recentActivity:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - discussion_created
                  - reply_added
                  - discussion_liked
              discussionId:
                type: string
                format: uuid
              discussionTitle:
                type: string
              userId:
                type: string
                format: uuid
              userName:
                type: string
              timestamp:
                type: string
                format: date-time
          description: Recent activity in discussions
      required:
        - totalDiscussions
        - totalReplies
        - totalLikes
        - totalViews
        - activeDiscussions
    LessonWorkshopSpec:
      type: object
      description: Structured step-based workshop exercise for a lesson
      required:
        - id
        - lessonId
        - isEnabled
        - title
        - steps
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the workshop exercise
        lessonId:
          type: string
          format: uuid
          description: ID of the lesson this workshop belongs to
        isEnabled:
          type: boolean
          description: Whether the workshop is enabled for students
        title:
          type: string
          description: Title of the workshop exercise
        introduction:
          type: string
          description: Introduction text shown before the workshop starts
        steps:
          type: array
          description: Sequential steps for the workshop exercise
          items:
            type: object
            required:
              - instructions
              - expected_commands
              - success_response
            properties:
              instructions:
                type: array
                items:
                  type: string
                description: List of instruction prompts for this step
              expected_commands:
                type: array
                items:
                  type: string
                description: Array of acceptable command variations for this step
              success_response:
                type: string
                description: Expected output when the command succeeds
              failure_response:
                type: string
                description: Error message with hint when the command fails
              success:
                type: boolean
                description: Whether this step has been completed successfully
        end_message:
          type: string
          description: Completion message shown when all steps are finished
        settings:
          type: object
          description: Workshop settings
          properties:
            allowRetry:
              type: boolean
              description: Whether retries are allowed
            maxRetries:
              type: integer
              description: Maximum number of retries
            autoAdvance:
              type: boolean
              description: Whether to auto-advance to next task
            allowHintUsage:
              type: boolean
              description: Whether hints can be used
            showExpectedOutput:
              type: boolean
              description: Whether to show expected output
        resources:
          type: array
          description: Additional resources for the workshop
          items:
            type: object
            required:
              - url
              - type
              - title
            properties:
              url:
                type: string
                format: uri
                description: URL of the resource
              type:
                type: string
                enum:
                  - documentation
                  - video
                  - tutorial
                description: Type of resource
              title:
                type: string
                description: Title of the resource
  responses:
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: NOT_FOUND
              message:
                type: string
                example: Resource not found
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: UNAUTHORIZED
              message:
                type: string
                example: Invalid or missing token
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: FORBIDDEN
              message:
                type: string
                example: Insufficient permissions
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: VALIDATION_ERROR
              message:
                type: string
                example: Validation failed
              details:
                type: object
                additionalProperties:
                  type: string
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: CONFLICT
              message:
                type: string
                example: Resource already exists
tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Payments
    description: 'Payment processing and enrollment management with automatic 100% discount handling. **Note**: For sponsorship codes, always validate first to get the sponsorship UUID before enrolling.'
  - name: Admin Payments
    description: Admin payment management and analytics
  - name: Sponsorships
    description: 'Sponsorship management and discount code system with admin payment tracking and invoice generation. **Important**: Use validation endpoint first to get sponsorship UUID for enrollment. **Admin Features**: Multi-course sponsorships, offline payment tracking, invoice generation.'
  - name: Sponsorship Opportunities
    description: Sponsorship opportunity creation and management
  - name: Discussions
    description: Discussion forum and community engagement system
  - name: Certifications
    description: User certification and credential management
  - name: Certification Programs
    description: Certification program enrollment and progress tracking
  - name: Lessons
    description: Course lesson management and progress tracking
  - name: Courses
    description: 'Course management and enrollment system. **Note**: For sponsorship enrollment, use the sponsorship UUID from validation, not the discount code.'
  - name: Classes
    description: Live class scheduling and enrollment management
  - name: File Uploads
    description: File upload and management endpoints
  - name: Notifications
    description: User notification system and preferences
  - name: Search
    description: Search and discovery endpoints
  - name: Meta
    description: Metadata and system information endpoints
  - name: Debug
    description: Debug and testing endpoints
  - name: Tests
    description: Test management and assessment endpoints
  - name: Scraping
    description: Web scraping management and URL processing endpoints
  - name: Users
    description: User management and profile endpoints
