name: Build and Deploy to Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Image digest
      run: |
        echo "Built and pushed images:"
        echo "${{ steps.meta.outputs.tags }}"

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          set -e
          
          echo "🚀 Starting deployment..."
          
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "❌ Docker is not installed on the server"
            exit 1
          fi
          
          # Check Docker permissions
          if ! docker info &> /dev/null; then
            echo "❌ Docker permission denied. User may not be in docker group"
            exit 1
          fi
          
          echo "✅ Docker is available"
          
          # Pull latest image
          echo "📦 Pulling latest image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Verify image was pulled
          echo "🔍 Verifying image..."
          if ! docker images | grep -q "${{ env.IMAGE_NAME }}"; then
            echo "❌ Failed to pull image"
            echo "📋 Available images:"
            docker images || true
            exit 1
          fi
          
          echo "✅ Image pulled successfully"
          
          # Stop and remove existing container
          echo "🛑 Stopping existing container..."
          docker stop themobileprof-backend || true
          docker rm themobileprof-backend || true
          
          # Create uploads directory if it doesn't exist
          echo "📁 Creating uploads directory..."
          UPLOADS_DIR="/var/www/tmp-root/uploads"
          
          # Try to create directory without sudo first
          if mkdir -p "$UPLOADS_DIR" 2>/dev/null; then
            echo "✅ Created uploads directory without sudo"
          else
            # If that fails, use home directory instead
            echo "⚠️  Cannot create /var/www/tmp-root/uploads, using home directory"
            UPLOADS_DIR="$HOME/themobileprof-uploads"
            mkdir -p "$UPLOADS_DIR"
            echo "✅ Created uploads directory in home: $UPLOADS_DIR"
          fi
          
          # Set proper permissions
          chmod 755 "$UPLOADS_DIR"
          echo "✅ Uploads directory ready: $UPLOADS_DIR"
          
          # Create .env file from GitHub secret
          echo "📝 Creating .env file..."
          cat > .env << 'EOF'
          ${{ secrets.ENV_FILE }}
          EOF
          
          # Run new container with host networking
          echo "🐳 Starting new container with host networking..."
          echo "📋 Container command: docker run -d --name themobileprof-backend --restart unless-stopped --network host -v \"$UPLOADS_DIR:/app/uploads\" --env-file .env ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          
          # Start container and capture the container ID
          CONTAINER_ID=$(docker run -d \
            --name themobileprof-backend \
            --restart unless-stopped \
            --network host \
            -v "$UPLOADS_DIR:/app/uploads" \
            --env-file .env \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest)
          
          if [ -z "$CONTAINER_ID" ]; then
            echo "❌ Failed to start container - no container ID returned"
            exit 1
          fi
          
          echo "✅ Container started with ID: $CONTAINER_ID"
          
          # Wait a moment and check container status
          sleep 5
          
          # Check if container is running
          if ! docker ps | grep -q themobileprof-backend; then
            echo "❌ Container failed to start"
            echo "📋 Container logs:"
            docker logs themobileprof-backend || true
            echo "📋 Recent container status:"
            docker ps -a | grep themobileprof-backend || true
            echo "📋 Docker system info:"
            docker system df || true
            echo "📋 Available images:"
            docker images | grep ${{ env.IMAGE_NAME }} || true
            exit 1
          fi
          
          echo "✅ Container is running"
          
          # Show container logs for debugging
          echo "📋 Container logs:"
          docker logs themobileprof-backend --tail 20 || true
          
          # Clean up .env file
          rm -f .env

    - name: Health check
      run: |
        echo "🏥 Performing health check..."
        sleep 30
        
        # Check if container is still running
        echo "🔍 Checking container status..."
        if ! docker ps | grep -q themobileprof-backend; then
          echo "❌ Container is not running"
          echo "📋 Container logs:"
          docker logs themobileprof-backend --tail 50 || true
          echo "📋 Container status:"
          docker ps -a | grep themobileprof-backend || true
          exit 1
        fi
        
        echo "✅ Container is running"
        
        # Try health check with retries
        for i in {1..5}; do
          echo "Health check attempt $i/5"
          if curl -f -m 30 http://${{ secrets.SERVER_HOST }}:3000/health; then
            echo "✅ Health check passed"
            exit 0
          else
            echo "❌ Health check failed, attempt $i"
            echo "📋 Container logs (last 10 lines):"
            docker logs themobileprof-backend --tail 10 || true
            if [ $i -lt 5 ]; then
              echo "⏳ Waiting 10 seconds before retry..."
              sleep 10
            fi
          fi
        done
        
        echo "❌ Health check failed after 5 attempts"
        echo "📋 Final container logs:"
        docker logs themobileprof-backend --tail 50 || true
        exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, test, security-scan, deploy]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-push.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Docker image built and deployed successfully"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Server: ${{ secrets.SERVER_HOST }}"
        else
          echo "❌ Deployment failed"
          echo "Build result: ${{ needs.build-and-push.result }}"
          echo "Deploy result: ${{ needs.deploy.result }}"
          exit 1
        fi 