name: Build and Deploy to Docker Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Image digest
      run: |
        echo "Built and pushed images:"
        echo "${{ steps.meta.outputs.tags }}"

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop and remove existing container
          docker stop themobileprof-backend || true
          docker rm themobileprof-backend || true
          
          # Create uploads directory if it doesn't exist
          sudo mkdir -p /var/www/themobileprof/uploads
          sudo chown $USER:$USER /var/www/themobileprof/uploads
          sudo chmod 755 /var/www/themobileprof/uploads
          
          # Run new container with volume mapping
          docker run -d \
            --name themobileprof-backend \
            --restart unless-stopped \
            -p 3000:3000 \
            -v /var/www/themobileprof/uploads:/app/uploads \
            -e NODE_ENV=production \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }} \
            -e BCRYPT_ROUNDS=${{ secrets.BCRYPT_ROUNDS }} \
            -e EMAIL_SERVICE_API_KEY=${{ secrets.EMAIL_SERVICE_API_KEY }} \
            -e EMAIL_FROM_ADDRESS=${{ secrets.EMAIL_FROM_ADDRESS }} \
            -e EMAIL_HOST=${{ secrets.EMAIL_HOST }} \
            -e EMAIL_PORT=${{ secrets.EMAIL_PORT }} \
            -e EMAIL_USER=${{ secrets.EMAIL_USER }} \
            -e EMAIL_PASS=${{ secrets.EMAIL_PASS }} \
            -e SPONSORSHIP_CODE_LENGTH=${{ secrets.SPONSORSHIP_CODE_LENGTH }} \
            -e MAX_SPONSORSHIP_DURATION_MONTHS=${{ secrets.MAX_SPONSORSHIP_DURATION_MONTHS }} \
            -e RATE_LIMIT_WINDOW_MS=${{ secrets.RATE_LIMIT_WINDOW_MS }} \
            -e RATE_LIMIT_MAX_REQUESTS=${{ secrets.RATE_LIMIT_MAX_REQUESTS }} \
            -e MAX_FILE_SIZE=${{ secrets.MAX_FILE_SIZE }} \
            -e UPLOAD_PATH=${{ secrets.UPLOAD_PATH }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Health check
      run: |
        sleep 10
        curl -f http://${{ secrets.SERVER_HOST }}:3000/health || exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, test, security-scan, deploy]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-push.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Docker image built and deployed successfully"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Server: ${{ secrets.SERVER_HOST }}"
        else
          echo "❌ Deployment failed"
          echo "Build result: ${{ needs.build-and-push.result }}"
          echo "Deploy result: ${{ needs.deploy.result }}"
          exit 1
        fi 